WEBVTT

1
00:00:00.780 --> 00:00:04.610
This is the second video of three,
in which we prove that the average running

2
00:00:04.610 --> 00:00:08.080
time of randomized quicksort
is big O of n log n.

3
00:00:08.080 --> 00:00:10.078
So, to remind you of
the formal statements.

4
00:00:10.078 --> 00:00:13.646
So again we're thinking about quicksort
where we implement the choose pivot sub

5
00:00:13.646 --> 00:00:17.056
routine to always choose a pivot uniformly
at random from the sub array that it

6
00:00:17.056 --> 00:00:17.700
gets passed.

7
00:00:17.700 --> 00:00:20.690
And we're proving that for
a worst case input array for

8
00:00:20.690 --> 00:00:25.175
an arbitrary input array of length n, the
average running time of quicksort where

9
00:00:25.175 --> 00:00:28.560
the average is over the random
pivot choices is big O of n log n.

10
00:00:28.560 --> 00:00:30.380
So let me remind you of the story so far.

11
00:00:30.380 --> 00:00:33.290
This is where we left things
at the previous video.

12
00:00:35.300 --> 00:00:36.780
We defined a few random variables.

13
00:00:36.780 --> 00:00:40.900
The sample space, recall, is just the, all
of the different things that could happen,

14
00:00:40.900 --> 00:00:45.030
that is all of the random coin flip
outcomes that quicksort could produce.

15
00:00:45.030 --> 00:00:49.400
Which is equivalent to all of
the pivot choices made by quicksort.

16
00:00:49.400 --> 00:00:50.900
Now, the random variables we care about.

17
00:00:50.900 --> 00:00:52.739
So first of all, there is C.

18
00:00:55.053 --> 00:00:58.866
Which is the number of comparisons between
pairs of elements in the input array that

19
00:00:58.866 --> 00:01:01.220
quicksort makes for
a given pivot sequence sigma.

20
00:01:03.876 --> 00:01:05.410
And then there are the xij's.

21
00:01:05.410 --> 00:01:08.510
And so that's just meant to count the
number of comparisons involving the ith

22
00:01:08.510 --> 00:01:10.990
smallest and the jth smallest
elements in the input array.

23
00:01:14.257 --> 00:01:17.089
Where you recall that zi and
zj denote the ith smallest and

24
00:01:17.089 --> 00:01:18.860
jth smallest entries in the array.

25
00:01:21.650 --> 00:01:24.050
Now because every comparison
involves some zi and

26
00:01:24.050 --> 00:01:28.630
some zj we can express C
as a sum over the xij's.

27
00:01:28.630 --> 00:01:32.510
So we did that in the last video,
we applied linearity at expectation,

28
00:01:32.510 --> 00:01:36.870
we used the fact that xij are zero one,
that is indicator random variables to

29
00:01:36.870 --> 00:01:41.140
denote that to write the expectation of
an xij just as the probability that it's

30
00:01:41.140 --> 00:01:43.700
equal to one and
that gave us the following expression.

31
00:01:46.610 --> 00:01:50.120
So the key insight and really the heart
of the quicksort analysis is to derive

32
00:01:50.120 --> 00:01:55.280
an exact expression for
this probability as a function of i and j.

33
00:01:55.280 --> 00:01:57.670
So for example if the third
smallest element in the array,

34
00:01:57.670 --> 00:01:59.430
the seventh smallest element in the array.

35
00:01:59.430 --> 00:02:02.610
Wherever they may be scattered in the
input array we want to know exactly what's

36
00:02:02.610 --> 00:02:06.460
the probability that they get compared at
some point in the execution of quicksort.

37
00:02:06.460 --> 00:02:11.212
And we're going to get a extremely precise
understanding of this probability in

38
00:02:11.212 --> 00:02:12.870
the form of this key claim.

39
00:02:16.411 --> 00:02:19.600
So for all pairs of elements,
and again, ordered pairs.

40
00:02:19.600 --> 00:02:21.480
So we're thinking of i being less than j.

41
00:02:23.450 --> 00:02:28.584
The probability that zi and
zj get compared at some

42
00:02:28.584 --> 00:02:35.930
point in the execution of quicksort
is exactly 2 divided by j- i + 1.

43
00:02:37.760 --> 00:02:40.790
So for example in this example of
the third smallest element and

44
00:02:40.790 --> 00:02:44.820
the seventh smallest element,
it would be exactly 40% of the time, two

45
00:02:44.820 --> 00:02:49.260
over five is how often those two elements
would get compared if you ran quicksort

46
00:02:49.260 --> 00:02:52.320
with a random choice of pivots, and
that's going to be true for every j and i.

47
00:02:52.320 --> 00:02:54.489
The proof of this key claim
is the purpose of this video.

48
00:02:57.925 --> 00:02:59.450
So how do we prove this key claim?

49
00:02:59.450 --> 00:03:02.520
How do we prove that the probability
that zi, zj get compared

50
00:03:04.410 --> 00:03:12.530
is exactly 2 over quantity j- i +s 1.

51
00:03:12.530 --> 00:03:17.273
Well fix your favorite ordered pair,
so fix elements zi,

52
00:03:17.273 --> 00:03:21.540
zj with i less than j, for

53
00:03:21.540 --> 00:03:24.550
example the third smallest and
the seventh smallest element in the array.

54
00:03:24.550 --> 00:03:28.939
Now, what we want to reason
about is the set of all elements

55
00:03:28.939 --> 00:03:32.730
in the input array between zi and
zj inclusive.

56
00:03:32.730 --> 00:03:35.465
And I don't mean between in
terms of positions in the array,

57
00:03:35.465 --> 00:03:37.300
I mean between in terms of their values.

58
00:03:38.530 --> 00:03:42.492
So consider the set between zi and

59
00:03:42.492 --> 00:03:47.775
zj + 1 inclusive, so zi, zi + 1,...

60
00:03:47.775 --> 00:03:50.660
Zj- 1, Zj.

61
00:03:50.660 --> 00:03:55.070
So for example, the third,
fourth, fifth, sixth and

62
00:03:55.070 --> 00:03:58.180
seventh smallest elements
in the input array.

63
00:03:58.180 --> 00:03:59.908
Wherever they may be, okay.

64
00:03:59.908 --> 00:04:03.614
And of course, the initial array is not
sorted, so there's no reason to believe

65
00:04:03.614 --> 00:04:06.406
that these j minus i plus 1
elements are contiguous, okay.

66
00:04:06.406 --> 00:04:09.200
They're scattered
throughout the input array.

67
00:04:09.200 --> 00:04:15.640
But we're going to think about them,
okay, zi through zj inclusive.

68
00:04:15.640 --> 00:04:19.930
Now throughout the execution of quicksort,
these j minus i plus 1

69
00:04:19.930 --> 00:04:24.480
elements lead parallel lives at least for
awhile in the following sense.

70
00:04:26.520 --> 00:04:28.980
Begin with the outermost
call to quicksort and

71
00:04:28.980 --> 00:04:32.842
suppose that none of these j minus i
plus 1 elements is chosen as a pivot.

72
00:04:32.842 --> 00:04:35.308
Where then could the pivot lie?

73
00:04:35.308 --> 00:04:39.220
Well it can only be a pivot that's
greater than all of these or

74
00:04:39.220 --> 00:04:41.340
it could be less than all of these.

75
00:04:41.340 --> 00:04:45.010
For example if this is the third fourth,
fifth, sixth and seventh smallest elements

76
00:04:45.010 --> 00:04:48.480
in the array, well the pivot is either
the minimum or the second minimum in which

77
00:04:48.480 --> 00:04:53.660
case it's smaller than all five elements,
or it's the eighth or largest, or

78
00:04:53.660 --> 00:04:56.840
larger elements in the array in which
case it's bigger than all of them.

79
00:04:56.840 --> 00:04:59.630
There's no way you're going to have
a pivot that somehow is wedged in between

80
00:04:59.630 --> 00:05:03.180
this set because this is a contiguous
set of order statistics, okay.

81
00:05:03.180 --> 00:05:07.840
Now what do I mean by these
elements leading parallel lives?

82
00:05:07.840 --> 00:05:11.390
Well, in the case where the pivot is
chosen to be smaller than all of these

83
00:05:11.390 --> 00:05:15.060
elements, then all of these elements
will wind up to the right of the pivot.

84
00:05:15.060 --> 00:05:17.490
And they will all be passed
to a common recursive call.

85
00:05:17.490 --> 00:05:19.170
The second recursive call.

86
00:05:19.170 --> 00:05:22.460
If the pivot is chosen to be
bigger than all of these elements,

87
00:05:22.460 --> 00:05:25.290
then they'll all show up on the left
side of the partitioned array.

88
00:05:25.290 --> 00:05:28.880
And they'll all be passed to
the first recursive call.

89
00:05:28.880 --> 00:05:34.070
Iterating this or proceeding inductively,
We see that as long as the pivot is

90
00:05:34.070 --> 00:05:37.410
not drawn from the set of
j minus i plus 1 elements.

91
00:05:37.410 --> 00:05:41.260
This entire set will get passed
on to the same recursive call.

92
00:05:44.490 --> 00:05:48.975
So these j minus i plus 1 elements
are living blissfully together in harmony

93
00:05:48.975 --> 00:05:52.420
until the point in which one of
them gets chosen as a pivot.

94
00:05:52.420 --> 00:05:55.090
And that, of course,
has to happen at some point.

95
00:05:55.090 --> 00:05:59.160
The recursion only stops when the array
length is equal to zero or one.

96
00:05:59.160 --> 00:06:01.760
So, if for no other reason at
some point there will be no other

97
00:06:01.760 --> 00:06:05.570
elements in a recursive call other
than these j minus i plus 1, okay.

98
00:06:05.570 --> 00:06:08.270
So at some point,
the reverie is interrupted and

99
00:06:08.270 --> 00:06:09.770
one of them is chosen as a pivot.

100
00:06:09.770 --> 00:06:12.850
So let's pause the quicksort algorithm and

101
00:06:12.850 --> 00:06:16.420
think about what things look like at the
time when one of these j minus i plus 1

102
00:06:16.420 --> 00:06:19.480
elements is first chosen
as a pivot element.

103
00:06:21.015 --> 00:06:23.960
There are two cases worth
distinguishing between.

104
00:06:23.960 --> 00:06:29.160
In the first case the pivot
happens to be either zi or zj.

105
00:06:31.220 --> 00:06:32.990
Now remember what it is
we're trying to analyze.

106
00:06:32.990 --> 00:06:36.370
We're trying to analyze the frequency,
the probability with when zi and

107
00:06:36.370 --> 00:06:38.020
zj gets compared.

108
00:06:38.020 --> 00:06:41.140
Well, if zi and
zj are in the same recursive call, and

109
00:06:41.140 --> 00:06:45.090
one of them gets chosen as the pivot, then
they're definitely going to get compared.

110
00:06:45.090 --> 00:06:47.830
Remember when you partition
an array around this pivot element,

111
00:06:47.830 --> 00:06:50.498
the pivot get's compare
to everything else.

112
00:06:50.498 --> 00:06:53.240
So if zi's chosen as a pivot,
it certainly get's compare to zj.

113
00:06:53.240 --> 00:06:56.650
If zj gets chosen as a pivot,
it gets compared to zi.

114
00:06:56.650 --> 00:06:59.729
So either way if one of these two is
chosen, they're definitely compared.

115
00:07:01.610 --> 00:07:06.200
If, on the other hand, the first of these
j minus i plus 1 elements to be chosen as

116
00:07:06.200 --> 00:07:09.290
a pivot is not zi or zj.

117
00:07:09.290 --> 00:07:14.750
If, instead, it comes from the set
zi plus 1, so on, up to zj minus 1.

118
00:07:14.750 --> 00:07:17.460
Then the opposite is true.

119
00:07:17.460 --> 00:07:20.530
Then zi and zj are not compared now.

120
00:07:20.530 --> 00:07:22.630
Nor will they ever be
compared in the future.

121
00:07:24.460 --> 00:07:25.290
So why is that?

122
00:07:25.290 --> 00:07:26.990
Well that requires two observations.

123
00:07:26.990 --> 00:07:29.630
First recall that when
you choose a pivot and

124
00:07:29.630 --> 00:07:33.420
you partition an array,
all of the comparisons involve the pivot.

125
00:07:33.420 --> 00:07:37.640
So two elements neither of which
is the pivot do not get compared

126
00:07:37.640 --> 00:07:39.170
in a partition sub routine.

127
00:07:39.170 --> 00:07:40.880
So they don't get compared right now.

128
00:07:40.880 --> 00:07:45.203
Moreover, since zi is the smallest of
these and Zj is the biggest of these, and

129
00:07:45.203 --> 00:07:48.300
the pivot comes from
somewhere between them.

130
00:07:48.300 --> 00:07:50.730
This choice of pivot will split zi and

131
00:07:50.730 --> 00:07:56.100
zj into different recursive calls, zi
gets passed to the first recursive call,

132
00:07:56.100 --> 00:08:01.120
zj gets passed to the second recursive
call and they will never meet again.

133
00:08:01.120 --> 00:08:03.450
So there's no comparison's in the future,
either.

134
00:08:07.530 --> 00:08:12.359
So these two observations right here
I would say is the key insight in

135
00:08:12.359 --> 00:08:14.240
the quicksort analysis.

136
00:08:14.240 --> 00:08:15.052
The fact that for

137
00:08:15.052 --> 00:08:18.824
a given pair of elements we can very
simply characterize exactly when they get

138
00:08:18.824 --> 00:08:22.320
compared and when they do not get
compared in the quicksort algorithm.

139
00:08:22.320 --> 00:08:26.261
That is they get compared exactly
when one of them is chosen as

140
00:08:26.261 --> 00:08:28.968
the pivot before any of the other elements

141
00:08:28.968 --> 00:08:33.495
with value in between those two has
had the opportunity to be a pivot.

142
00:08:33.495 --> 00:08:35.720
That's exactly when they get compared.

143
00:08:35.720 --> 00:08:37.700
So this will allow us to
prove this key claim,

144
00:08:37.700 --> 00:08:40.270
this exact expression on
the comparison probability.

145
00:08:40.270 --> 00:08:42.180
That will plug into
the formula we had earlier and

146
00:08:42.180 --> 00:08:45.320
will give us the desired bound on
the average number of comparisons.

147
00:08:45.320 --> 00:08:46.900
So let's fill in those details.

148
00:08:48.270 --> 00:08:50.950
So first let me rewrite the high
order bit from the previous slide.

149
00:08:52.470 --> 00:08:56.780
So now at last we will use the fact
that our quicksort implementation

150
00:08:56.780 --> 00:08:59.440
always chooses a pivot
uniformly at random.

151
00:08:59.440 --> 00:09:03.000
That each element of a sub array
is equally likely to serve

152
00:09:03.000 --> 00:09:05.740
as the pivot element in
the corresponding partition call.

153
00:09:08.280 --> 00:09:09.402
So what does this buy us?

154
00:09:09.402 --> 00:09:11.620
This just says all of
the elements are symmetric.

155
00:09:11.620 --> 00:09:16.170
So each of the elements zi,
zi plus 1, all the way to zj,

156
00:09:16.170 --> 00:09:20.310
is equally likely to be the first one
asked to serve as a pivot element.

157
00:09:22.870 --> 00:09:27.394
Now the probability that zi and
zj get compared is simply the probability

158
00:09:27.394 --> 00:09:30.620
that we're in case one,
as opposed to in case two.

159
00:09:30.620 --> 00:09:35.340
And since each element is equally likely
to be the pivot, that just means there's

160
00:09:35.340 --> 00:09:40.280
sort of two bad cases, two cases in which
one can occur out of the j minus i plus 1

161
00:09:40.280 --> 00:09:45.290
possible different choices of pivot.

162
00:09:45.290 --> 00:09:48.310
Now we're talking about a set
of j minus i plus 1 elements.

163
00:09:48.310 --> 00:09:53.390
Each of whom is equally likely to be asked
to be served first as a pivot element.

164
00:09:53.390 --> 00:09:57.050
And the bad case,
the case that leads to a comparison,

165
00:09:57.050 --> 00:09:58.670
there's two different possibilities for
that.

166
00:09:58.670 --> 00:10:00.190
It was zi or zj is first.

167
00:10:00.190 --> 00:10:05.250
And the other j minus i minus 1 outcomes
lead to the good case where zi and

168
00:10:05.250 --> 00:10:07.020
zj never get compared.

169
00:10:07.020 --> 00:10:10.618
So overall, because everybody's
equally likely to be the first pivot,

170
00:10:10.618 --> 00:10:16.800
we have that the probability with zi and
zj get compared.

171
00:10:21.093 --> 00:10:25.473
Is exactly the number of pivot
choices that lead to comparison,

172
00:10:25.473 --> 00:10:28.810
divided by the number of
pivot choices overall.

173
00:10:30.650 --> 00:10:33.090
And that is exactly the key claim.

174
00:10:33.090 --> 00:10:37.549
That is exactly what we asserted was
the probability that a given zi and

175
00:10:37.549 --> 00:10:41.320
zj get compared for
no matter what i and j are.

176
00:10:41.320 --> 00:10:43.850
So, wrapping up this video,
where does that leave us?

177
00:10:43.850 --> 00:10:46.140
We can now plug in this expression for

178
00:10:46.140 --> 00:10:48.750
this probability of
comparison probabilities.

179
00:10:48.750 --> 00:10:50.460
Into the double sum that we had before.

180
00:10:51.460 --> 00:10:56.400
So putting it all together what we
have is that what we really care

181
00:10:56.400 --> 00:11:01.338
about the average number of
comparisons that quicksort makes on

182
00:11:01.338 --> 00:11:05.728
this particular input of array n,
of length n is just this

183
00:11:05.728 --> 00:11:10.592
double sum which iterates over
all possible ordered pairs ij.

184
00:11:10.592 --> 00:11:15.109
And what we had here before was
the probability of comparing zi and

185
00:11:15.109 --> 00:11:19.065
zj we now know exactly what that is so
we just substitute.

186
00:11:21.260 --> 00:11:24.234
And this is where we're going to stop for
this video so

187
00:11:24.234 --> 00:11:28.523
this is going to be our key expression
star which we still need to evaluate but

188
00:11:28.523 --> 00:11:30.820
that's going to be the third video.

189
00:11:30.820 --> 00:11:34.610
So essentially we've done all of
the conceptual difficulty in understanding

190
00:11:34.610 --> 00:11:37.250
where comparisons come from
in the quicksort algorithm.

191
00:11:37.250 --> 00:11:40.080
All that remains is a little bit
of an algebraic manipulation

192
00:11:40.080 --> 00:11:43.000
to show that this starred
expression really is big O log n.

193
00:11:43.000 --> 00:11:43.980
And that's coming up next.