0:00
在这一期视频里 我们来讨论 最后但同样重要的数据结构 即平衡二叉搜索树 正如我们讨论的其他数据结构 我们先从什么是平衡二叉搜索树开始 我们从用户的角度看 并且 我们会问这种数据结构支持哪些操作 它能用来做什么? 然后我们再转到如何以及为什么 我们将深入这种数据结构的细节 看看它是怎么实现的 然后 通过理解它的实现来理解为什么它的操作 能在实际执行时间内完成 那么平衡二叉搜索树到底适合做什么呢? 你可以试着把它当作 已排序的数组来考虑 也即 如果你有数据保存 在平衡二叉搜索树中 你可以做对这组数据做很多当它是 静态的有序数组时的任何事情 此外 这个数据结构也支持 插入和删除操作 用它来存储一个动态数据集 你可以随时进行存储 为道出平衡二叉搜索树 所支持的操作 让我们先从 有序数组开始 看看恰巧 以这种方式存储的数据 你可以轻松完成的事情 让我们考虑一组数值数组 如我们通常所说 在数据结构里 存储的一般是其他 你真正关心的数据 而数字 只是每条记录的唯一标识 所以 这有可能是一个雇员的ID 社会保障号码 包裹ID或者网络连接等等 那么假定你的数据存储在一个 有序数组里 而不是一堆 杂乱无章的数据时能做什么呢? 首先你可以搜索并 回想一下在有序数组中搜索 通常是采用二分搜索的 当我们拿到一本电话簿时 我们就是这样查找电话号码的 你会从电话簿的中间开始 如果你要找的名字小于中间的那个 你会往左翻 如果不是 你会往右翻 正如我们很久之前在关于主方法 的课件中讨论的 这样的查找会在对数时间内完成 大致说来 你每翻动一次 你就除去了待查找的一半数据 所以查找 能保证通过对数次数迭代而终止 所以二分查找需要对数搜索时间 我们在之前课件中讨论的其他问题中 还有选择问题 所以之前 我们是在数组未排序的 艰难情境下讨论问题的 回忆一下选择问题 除一个数组外 还给定你一个顺序统计量 所以 如果你的顺序统计量是17 这意味着 你在查找保存在这个数组中的 最小的第17个数 在之前的课件中 针对未排序数组 我们倾力找到一个线性时间的解决方法 现在 在有序数组中 你要知道数组里的最小的第17个元素 是很简单的问题 只要返回数组第17个元素就好了 因为数组已经排序过了 它们就在那里 毫不费力 数组已经完成排序 在常数时间内 你就能解决选择问题 当然 选择问题还有两个特殊的情况 就是寻找数组中的最小值 即顺序统计量 i = 1  以及最大值 即顺序统计量 i = n 所以这相当于分别返回数组中的 第一个元素和最后一个元素 好的 让我们再头脑风暴一下 在有序数组上我们还能实现其他的操作吗? 是的 还不止一两个 有这么两个操作分别叫作 前驱操作和后继操作 这些操作的方法是 你从一个元素开始  比如你从指向23的指针开始 你想找到数组中下一个最小的元素 这就是前驱查询 并且 后继操作就是返回数组中 下一个最大的元素 所以 23的前驱是17 23的后继应该是30 同样地 在有序数组中 这些都很简单不是? 你知道前驱 就是数组中前一个位置的元素 后继就是后一个元素 所以给定23的指针  你可以在常数时间内返回17和30 还有其他吗? 是的 比如秩操作? 我们还未曾 讨论过这一操作 秩是什么? 秩就是在数据结构中 有多少键小于或等于给定的键 举个例子 23的秩等于6 因为数组的8个元素中有6个小于 或者等于23 你可以想一想 实现秩操作其实不比 实现搜索困难 你要做的就是搜索给定的键 不管搜索在数组中的哪里终止 你只要看看它在数组中的位置 然后 哇 这就是那个元素的秩 举个例子 如果你用二分查找搜索23 当你终止里 你会发现搜索停留在第6个位置 由此可得23的秩为6 如果你做一次不成功的搜索 比如搜索21 那么你将滞留在17和23之间 于是你可以得出结论 21的秩为5 最后让我以在有序数组中同样能轻松实现 的最后的一种操作来结束讨论 也即 你可以有序地输出 或者打印存储的键 比如从最小值到最大值 同样自然地 你这里要做是只是 从数组的左边扫描到右边 输出你所看到的任何元素 执行时间是每个元素为常数 或者对整个数组来说就是线性的 所以有序数组所支持的这一系列操作令人惊叹 你是否还不满足 想要在我们的数据结构上 做更多的其他操作呢? 好吧  嗯 的确 我们当然想要更多的操作 而不仅仅是上面讨论过的 理由是 这些操作是在静态数据集上的 它们不随时间发生变化 但世界是通常是动态的 举例说明  如果你在经营一家公司并且想记录雇员信息 有时你会来新的雇员 有时雇员也会离职 这是一种数据结构 不仅支持刚才提及的操作 同样也要支持插入和删除操作 目前 在有序数组中实现插入和删除操作 并非不可能 只是这将会运行得很慢 通常来说 如果你还想保持 数组的有序性的话 插入就要线性地进行大量复制 所以当插入或删除时 这个线性时间的性能是不可接受的 除非你很少进行这些操作 所以 平衡二叉搜索树的存在的目的是 不仅要实现与有序数组同样丰富的操作集 同时也在支持插入和删除操作 现在 这些操作中的一部分可能会变慢 或者我们要做一点让步 它们将不再是常数时间的了 但是 对于所有这些操作 之前是对数时间的现在依然是对数时间的 元素的有序输出也保持线性时间 此外 我们将能够在对数时间内 执行插入和删除操作 那么 让我再阐述更多细节 平衡二叉搜索树表现起来 与有序数组很相似 另外 平衡二叉搜索树的 插入和删除操作也更快 只需对数时间 所以 我们继续往下说说这些操作 搜索将执行O(log n)的时间 这与之前相同 选择操作在有序数组中为常数时间 这里它将需要对数时间 所以在选择问题上我们做出了让步 但它依然能快速执行 即使在特殊的情况下 如在我们的数据结构里 查找最小或最大值 通常需要对数时间 对于查找前驱和后继 也将不再是常数时间 它们将需要对数时间 秩操作即使在有序数组中 也要对数时间 这里依然保持对数时间 我们将会看到 如果我们想依键值按序输出 比如从最小到最大 相对于有序数组 我们几乎没有效率损失 关键是 与有序数组这一数据结构相比 我们有两个更快的操作 我们能够插入元素 如果你雇用了一位新员工 你可以将其插入到你的数据结构中 如果有雇员决定离开 你也可以将他们从数据结构中删除 你不必像在有序数组里那样花费线性时间 你只要花费对数时间 这里n一直是 数据结构中存储的键的数量 这里的关键之处是 如果你有个数据 并且它的键是 来自完全有序集合的 比如数值键 那么平衡二叉搜索树 将支持一系列丰富的操作 所以 如果你想利用所有键的排序信息 进行各种不同的处理的话 你尽可以考虑使用平衡二叉搜索树 来进行存储 那么请记住我们已经见到过 许多数据结构 它们没有平衡二叉搜索树的全部操作 但凡有的 它们做得更好 我们已经 我们就在上一个幻灯片里 讨论过有序数组 所有如果你有一个静态数据集 并且 你不需要插入和删除操作  那么无论如何不必考虑平衡二叉搜索树 就用有序数组 因为它们做起事来更快 但我们也要寻找动态数据结构 它们虽然没有有序数组那么快 但它们有自己的操作 操作起来也很好 所以 我们来看堆 什么是堆 它与搜索树一样适用于动态数据结构 它允许插入和删除 两者都是对数时间的 另外 它能追踪最小元素 或者最大元素 记住在堆中 你可以要么 追踪最小元素 要么最大元素 但不像在搜索树中 堆不能同时追踪最小和最大值 所以 如果你需要这三个操作 插入 删除和记忆最小值 正如在堆视频中讨论的那样 在一个优先队列或者调度安排应用中 二叉搜索树就牛刀小用了 你或许会转而考虑堆 事实上 堆的优点 这里没有用大O标记表示 拥有对数操作时间 并只需要 常数因子的空间 并且与平衡二叉搜索树相比 堆在时间上要更快 另一个我们讨论过的动态 数据结构是哈希表  哈希表非常非常善于 处理插入和搜索 也即查询 在某些时候 根据实现 也能很好地处理删除操作 所以 如果实际上你不需要 记住一些东西如 最小值 最大值 或者记住键的排序信息 你只需记住那里有什么 没有什么 那么对于这样的数据结构 就选择哈希表 而不是平衡二叉搜索树 当然 平衡二叉搜索树 也是可以的 它给你对数查找时间 但这是一种浪费 你所需的只是快速查找  哈希表会提供你的常数时间的查找 所以与平衡二叉搜索树相比 这是一不可忽略的优势 但如果你想要 一系列丰富的操作以处理你的数据 那么 平衡搜索二叉树 会是一个最佳的数据结构之选 以满足你的需求 
