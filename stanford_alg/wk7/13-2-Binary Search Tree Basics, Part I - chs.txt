0:00
本视频里, 我们将讨论 二叉搜索树除去它的实现的其它基础知识 我们不会把重点放在树的平衡特性上 平衡特性将在以后讨论 我们今天的主题是 普通二叉树的基础特性: 是否平衡 这之前，我们先回想下 为什么我们需要这么做 想想，二叉树的平衡版本 这种数据结构存在的理由 某种意义上 是一个动态的有序数组 所以， 它将适用于所有有序数组的应用 可能的情况下 最多也就是花费稍微多一点的时间代价 但也已经足够快了 除动态特性之外, 它还实现了插入和删除功能 记住, 如果你想要维护一个有序数组 你的每次插入和删除 都可能需要付出 一个线性时间作为成本 在大多数应用中这个成本非常昂贵 相对的, 使用一个平衡版本的二叉树 你能够在树关键字总数的对数时间内 实现插入和删除 你甚至可以 在对数时间内实现搜索 不比在一个有序数组 中进行二进制搜索慢 你可以说, 在查找问题上 最好或者最差的特殊情况都只是对数时间 它并不是一个和有序数组一样的线性解 但是, 依然对数时间已经不错了 而且, 在线性时间内你可以 打印出所有的从最小到最大的关键字 每个关键字仅需常数时间 你可以像有序数组那样在线性时间内完成扫描 以上正是平衡二叉树的优点 能实现所有有序数组的功能 并且能够在 对数时间内实现插入和删除 那么, 搜索树究竟怎样组成的? 我接下来在本视频内将仅仅讨论 平衡树和非平衡树之间的共性 在稍后的视频里 才会探讨平衡特性 先说一下二叉搜索树的关键因素 先在幻灯片的右上角画一个简单的动画 作为例子 以此来展示正在排序存储的关键字和树的节点 之间一一对应的关联 和之前一样, 在讨论中 我们仅仅只关心数据结构本身 树的每个节点仅含有关键字 通常, 它会关联到你所关注的数据 于是, 树的每个节点通常仅含有 关键字 和一个指向某个含有更多信息的数据结构的指针 关键字可以是 员工的ID号 然后有一个指向更多该员工信息的指针 现在, 除了节点 你必须有各节点间的链接 链接有很多不同的实现指针方法 将树的节点连接到一起 但在本视频中我将 使用简单的说明 我们仅仅假设 在每个节点, 只有三个指针 一个指向左孩子, 一个指向右孩子 第三个指向父节点 于是, 某些指针 可以是空指针 事实上, 我画的五个节点的二叉树中 每个节点的三个指针中至少有个为空指针 比如, 关键字为"1"的节点的 左孩子指针就是空指针 它没有左孩子 它的右孩子指针指向关键字为 "2"的节点, 它的父指针指向 关键字为"3"的节点 类似的有, "3"有一个空的父指针 它是树的根节点 这个关键字是"3"的节点是特殊节点 它没有父指针 当然, 他有一个左孩子指针指向"1" 同时, 它有一个右孩子指针指向"5" 这些是搜索树的最基本的属性 在此我们称呼它为搜索树属性 搜索树属性按照以下方式来评估 搜索树的每个节点 如果节点有关键字 那么它左子树的上所有节点的关键字 都应当小于该节点的关键字 类似的有, 所有存储于右子树的关键字 的值都应当大于该节点关键字 于是, 如果我们有某个节点它的关键字的值为x 它存储于树中的某个很深的位置 从它往上 我们能够最终达到树的根节点 接下来, 我们可以认为x的左子树 上所有的节点都是可以 通过x的左孩子指针连接到 类似的, 它的右子树上所有节点 也都可以通过x的左孩子指针连接到 在这里, 左右左子树上节点的 关键字的值都小于x 而所有右子树上节点的关键字的值都大于x 注意 这一限定不仅仅限制于根节点 它也适用于树中的每个节点 我定义了搜索树属性 并假定搜索树中的所有节点的 关键字的值都是不同的 这也是所有左子树都严格小于 右子树的原因 但是搜索树也适用于 多个节点的关键字的值相同的情况 我们只需要在数值比较是作适当调整即可 比如, 你可以说左子树中的每个节点 都小于等于该节点 并且右子树中的每个节点 必须严格的大于该节点  这样就能够允许多个节点的关键字的值相同了 所以， 如果这是你第一听说树属性 你可能对它的概念不大了解 不过, 如果反过来从 如何在数据结构中 更容易的实现搜索 这个角度来思考就不难理解了 关键是, 搜索树属性能够准确的告诉你 去树的哪里寻找指定的关键字 比如, 假设你要查找 一个关键字为"23"的节点 你从关键字为"17"的根节点开始查找 根据搜索树属性你可以断言 关键字"23"的节点必然在哪 既然根节点的关键字为"17" 那么你要找的关键字"23"就不可能 在该树的左子树中 于是, 你只需要沿着 右孩子指针查找 并且在接下来的搜索中完全不用考左子树 这个方法的原理和二分法相同 你从数组的中间开始查找 并且只需要找到数值最中间的数 和目标数进行大小比较 然后, 递归的选择数值小或者数值大的那一半数组 而无需考虑未被选中的那部分数组 这也是搜索树属性的原理 我们可以从根节点往下 搜索树属性保证了我们只有一个 向左子树或者向右子树的搜索方向 不需要担心我们没有访问的部分 我们也可以 画一个关于堆得讨论的分析图 还记得堆在逻辑上 我们可以将它看作是树结构 当然 我是是用数组来实现它的 同时 对有某些堆属性 当你回顾堆属性是 你会发现 堆属性和搜索树属性并不相同 这俩种不同的属性 分别适用于不同的应用 提及堆的时候 堆属性被用于提取最小关键字 父节点必须小于它的子节点 这不同于 搜索树属性 它要求所有的左子节点必须小于节点本身 而所有右子节点必须大于该节点 而堆属性则是用在 使用最小的代价获取最小关键字 它限定最小关键字必须为根节点 堆得数据结构就是用于查找到最小关键字的 搜索树则是 设计成帮助你快速查找 这也就是为什么 俩种数据结构的属性会有不同 在搜索树中 当你要找比当前节点关键字小的节点 你向左查找 当你要寻找关键字更大的节点 你就向右查找 这一点很关键 它能够帮助你快速的理解 尤其是当我们接下来的视频里 在我们强制实现树的平衡的时候 对于不同的关键字的组合 我们可以用各种不同的搜索树来构建它们 在上一张幻灯片中 我画了一个包含如下关键字的搜索树 一 二 三 四 五 我在这里重新绘制一个相同的搜索树 你仔细观察这个搜索树 就能够发现 树的每一个节点 都存在 左子树上的所有关键字都比较小 而所有 右子树上的关键字都比较大 然而 看我接下来绘制的另外一个有者同样 关键字组合的搜索树 你会发现 在第二个搜索树中根节点  是五 它也是最大的关键字 同时 每个节点都不存在右孩子 只有左孩子 它们按照五 四 三 二 一 逐渐变小的方式排列 仔细观察 它依然有所有左子树 都偏小的属性 当然 它并没有任何的右子树 于是 通过对这俩个搜索树的比较 我们可以推测 对于某个固定的关键字组合 可以用不同高度的搜索树来构成 树的高度可以是最优化的完全平衡二叉树 它的高度 仅仅是对数 而最糟糕的情形则是 如图的链结构 它的高度是关键字的总数n 在此 我们也称搜索树的高度为深度 它是 从根节点到叶子的最大跳数 于是 对于第一个搜索树而言 它的高度是二 而对于第二个搜索树来说 它的高度为四 当一个搜索树是完美分布的 它的 子节点的数目从根节点开始每一层都是上一层的俩倍 于是 当每个节点都分配完毕 该搜索树的高度就是 log2n 通常 当你有一个数目为n的关键字的链 那么它的深度将为n-1 但我们实际上会将它的深度近似为n 以上就是我们需要了解的二叉搜素树的基本结构 我们将会涉及到 二叉搜索树的相关操作的实现 于是 在我们讲述二叉搜索树支持的大多数操作的时候 我可以给大家一个 关于二叉搜索树的整体的描述 这样大家就可以通过编程来 实现那些操作 如果你需要更深层次的了解或者需要完成 完整的代码 你可以在网络或者好的编程或 算法书中找到详细的内容 接下来 我们从主要的操作来着手 那就是 搜索 在搜索树属性中 我们会主要讨论 如何实现搜索 诚然 搜索树属性本身就是 用来便于实现查找某个关键字的 你只需要通过大小比较 就必然能够找到目标 当然 搜索的起点必然是根节点 在最好的情形下 根节点就是你所要查找的关键字的位置 你只需停止搜索 并返回根节点即可 在大多数情况下 根节点的关键字 要么大于 要么小于 你需要查找的关键字 如果 是小于 你就需要去 找含有小于根节点关键字的方向查找 于是 搜索树属性决定了 我们的搜索方向 必然是左子树 于是你向左孩子指针查找 如果根节点的关键字 大于 我们所要查找的关键字 我们就像右子树方向查找 我们只需要在右子树内递归查找即可 举例说 如果 你要查找一个关键字 而 显然 你应该由根节点向左 如果你要查找关键字四 显然你会由根节点开始向右查找 那么 什么时候我们的搜索该终止? 这里有一种 或者俩种终止方式 首先 你会找到目标关键字 在我们的例子中 如果你要查找关键字四 你将经由右孩子指针 然后通过左孩子指针 并到达树底 找到关键字四 并且成功返回 在另外一种方式下 你将终止 并返回一个空指针 在我们的例子中 假设你要寻找的关键字是六 会发生什么? 你会从根节点开始 三比六小 于是你向右查找 你找到了五 五依然小于六 于是你再次向右查找 但是当前的右孩子指针为空 也就意味着六并不是树中节点的关键字 如果六是树中节点的关键字 它必然位于树的右边 它也必然 位于关键字为五的节点的右边 但是在你的搜索过程中 含关键字六的节点 并不存在 于是你 成功的返回 搜索失败 接下来我们讨论 插入操作 也就是在我们刚刚描述过的搜索过程上 加一个顺带的操作 首先考虑没有重复关键字的 简单例子 插入 首先需要查找关键字k 因为树中没有重复的关键字 搜索的结果将是失败 关键字k还没 存在于树中 比如 在右边的图中 我们尝试 去插入关键字6 当我们搜索关键字6的时候会发生什么 我们跟随一个右孩子指针 我们从3到5 然后试图继续查找 下一个 并卡在下个位置 在关键字5的右边有一个空指针 当存在一个失败的查找结果的时候 在空指针位置终止 我们只需要 将该空指针重新连线使其指向含有该新关键字的节点 这样 如果你希望允许 树中存在重复的节点 你也只需要稍作调整即可 你只需要使用一些规则来处理 遇到节点的关键字和要插入的关键字相同的情况 比如说 当当前节点的关键字和你要插入的关键字相同 你可以按照 继续向左子树查找 直到遇到空指针 才终止查找 然后你停下来 将该空指针重新连线指向要插入的新节点 有个进阶的练习 在这里我们并不会继续讨论的 就是处理当你 插入一个新节点的同时 还保持树的搜索树属性 也就是当你从 一个每个左节点的关键字都小于右节点的搜索树着手 着手 你插入某些关键字 按照这个规则 你在新节点插入之后 依然维持搜索树的 这个左节点关键字偏小的属性 大家可以考虑下解法 Translator: Robina 
