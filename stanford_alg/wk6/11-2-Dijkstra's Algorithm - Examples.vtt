WEBVTT

1
00:00:01.120 --> 00:00:04.040
So let's just see how it works in the same
example we traced through earlier.

2
00:00:05.720 --> 00:00:10.540
So we start out just by initializing
things in the obvious way, so

3
00:00:10.540 --> 00:00:13.420
the shortest path distance
from s to itself we say is 0.

4
00:00:13.420 --> 00:00:17.120
And the shortest path from s to
itself is just the empty path.

5
00:00:18.450 --> 00:00:24.710
And initially, our x is going to be
just the source for text itself.

6
00:00:24.710 --> 00:00:27.430
So, now we enter the main while loop and
so, remember in the while loop,

7
00:00:27.430 --> 00:00:32.290
we say well, let's scan all of the edges
whose tail is in the vertices we've

8
00:00:32.290 --> 00:00:37.050
already looked at, whose tail is in x and
whose head is outside of x.

9
00:00:37.050 --> 00:00:40.515
Now, in this first iteration,
there are two such edges,

10
00:00:40.515 --> 00:00:44.270
there's the edge (s,v) and the edge (s,w).

11
00:00:44.270 --> 00:00:46.950
So how do we know which
of these two to choose?

12
00:00:46.950 --> 00:00:49.420
Well, we evaluate
Dijkstra's Greedy criterion.

13
00:00:49.420 --> 00:00:53.404
And so remember what that is,
Dijkstra's Greedy score for

14
00:00:53.404 --> 00:00:59.063
a given edge (v,w) that's crossing the
frontier is just the previously computed

15
00:00:59.063 --> 00:01:04.422
shortest path distance for the tail of
the arc plus the length of the arc itself.

16
00:01:04.422 --> 00:01:08.166
So at this point,
(s,v) has a greedy score of 0 + 1,

17
00:01:08.166 --> 00:01:13.166
which is 1, and the arc (s,w) has
a greedy score of 0 + 4, which is 4.

18
00:01:13.166 --> 00:01:16.520
So obviously (s,v) is going to
be the shorter of those two.

19
00:01:16.520 --> 00:01:21.970
So we use the edge (s,v), this is playing
the role of v*w* on the previous slide.

20
00:01:21.970 --> 00:01:26.080
And the algorithm then suggests
that we should add v to our set x.

21
00:01:26.080 --> 00:01:31.624
So we suck in v, and
our new x consists of s,

22
00:01:31.624 --> 00:01:35.820
n, v, and it also tells us how to
compute the shortest path distance and

23
00:01:35.820 --> 00:01:37.098
the shortest path from s to v.

24
00:01:37.098 --> 00:01:42.190
Namely, in the A array,
we just write down what

25
00:01:42.190 --> 00:01:48.280
was the Dijkstra's greedy score for this
particular edge, and that was 0 + 1, or 1.

26
00:01:48.280 --> 00:01:51.256
It also tells how to compute
the shortest path for v.

27
00:01:51.256 --> 00:01:54.190
Namely, we just inherit the shortest
path to the tail of the arc,

28
00:01:54.190 --> 00:01:58.420
which in this case, is the empty path from
s to itself and then we tack on the end,

29
00:01:58.420 --> 00:02:02.290
we append the arc we used to get here,
the arc S(v).

30
00:02:02.290 --> 00:02:04.377
So now we go to the next
iteration of the while loop,

31
00:02:04.377 --> 00:02:07.150
so with our new set capital
X consisting of s and v.

32
00:02:07.150 --> 00:02:11.110
And now again, we want to look at all
edges which are crossing the frontier,

33
00:02:11.110 --> 00:02:15.590
edges that have tail in x and
head outside x.

34
00:02:15.590 --> 00:02:18.030
And now we see there's
three such crossing edges.

35
00:02:18.030 --> 00:02:22.582
There's (s,w), there's (v,w),
and there's (v,t).

36
00:02:22.582 --> 00:02:26.340
All of those have the tail in x and
the head outside of x.

37
00:02:26.340 --> 00:02:29.280
So we need to compute Dijksta's greedy
score for each of those three and

38
00:02:29.280 --> 00:02:31.000
then pick the minimum.

39
00:02:31.000 --> 00:02:33.350
So let's go from bottom to top.

40
00:02:33.350 --> 00:02:39.250
So first of all,
we can look at the arc (s,w).

41
00:02:39.250 --> 00:02:43.230
And the greedy score here is the shortest
path distance for the tail, so

42
00:02:43.230 --> 00:02:45.930
it's 0 plus the length of the arc,
which is 4.

43
00:02:45.930 --> 00:02:49.400
So here we get a 4 in this iteration.

44
00:02:49.400 --> 00:02:54.110
Then if we do this cross-bar edge,
this (v,w) edge, the Dijkstra's greedy

45
00:02:54.110 --> 00:02:58.100
score is the A value, or the shortest
path distance value of the tail.

46
00:02:58.100 --> 00:03:02.590
And we computed that last iteration,
that A(V) value is 1,

47
00:03:02.590 --> 00:03:05.640
we add to that the length of the arc,
which in this case is 2.

48
00:03:05.640 --> 00:03:09.795
So this edge (v,w) has a score of 3.

49
00:03:11.230 --> 00:03:16.510
Finally there's the arc (v,t) and
here we're going to add 1, which is

50
00:03:16.510 --> 00:03:20.530
the shortest path distance of the tail of
the arc plus the edge length, which is 6.

51
00:03:20.530 --> 00:03:23.190
So that has the worst score.

52
00:03:23.190 --> 00:03:28.190
So, since the edge (v,w) has the smallest
score, that's the one that guides how we

53
00:03:28.190 --> 00:03:31.350
supplement x and how we compute
the shortest path distances and

54
00:03:31.350 --> 00:03:35.510
the shortest path for
the newly acquired vertex w.

55
00:03:35.510 --> 00:03:39.360
So the changes are,
first of all, we enlarge x.

56
00:03:39.360 --> 00:03:40.930
So x is now everything, but t.

57
00:03:42.340 --> 00:03:45.140
And then how do we compute things for w?

58
00:03:45.140 --> 00:03:48.680
Well, the shortest path, so the r entry
in the A array is just going to be

59
00:03:48.680 --> 00:03:51.398
Dijkstra's greedy score in
the previous iteration.

60
00:03:51.398 --> 00:03:54.940
So that was 1+2, so
it's going to be equal to 3.

61
00:03:54.940 --> 00:03:56.810
And then what is the shortest path?

62
00:03:56.810 --> 00:03:58.960
How do we fill up the array B?

63
00:03:58.960 --> 00:04:02.970
Well we inherit the shortest path to
the tail of the arc, which in this case,

64
00:04:02.970 --> 00:04:07.610
is the arc (s,v) and then we append
the arc that we used to choose

65
00:04:07.610 --> 00:04:10.850
this new vertex w, so
that's the arc (v,w).

66
00:04:10.850 --> 00:04:15.069
So the new path is just the (s,v,w) path,
okay, so

67
00:04:15.069 --> 00:04:20.230
it's what we compute is the shortest
path from s to w in this graph.

68
00:04:20.230 --> 00:04:24.200
So now we proceed to the final
iteration of Dijkstra's algorithm.

69
00:04:24.200 --> 00:04:28.370
We know what vertex we're going to bring
in to x, it's going to be the vertex t,

70
00:04:28.370 --> 00:04:29.530
that's the only one left.

71
00:04:29.530 --> 00:04:33.880
But we still have to compute by
which edge we discovered t and

72
00:04:33.880 --> 00:04:35.320
bring it in to the set x.

73
00:04:35.320 --> 00:04:40.125
So we have to compute the greedy score for
each of the two crossing arcs, (v,t) and

74
00:04:40.125 --> 00:04:40.810
(w,t).

75
00:04:40.810 --> 00:04:46.140
And then this final iteration,
the score for the arc (v,t) is unchanged.

76
00:04:46.140 --> 00:04:49.830
So this is still going to be
the a value of its tail 1,

77
00:04:49.830 --> 00:04:51.120
plus the length of the arc, 6.

78
00:04:51.120 --> 00:04:55.230
So the score here is still 7,
and now for the first time,

79
00:04:55.230 --> 00:04:58.498
(w,t) is a crossing edge of the frontier.

80
00:04:58.498 --> 00:05:03.191
And when we compute its score, it's
the a value of its tail w, which is 3,

81
00:05:03.191 --> 00:05:07.450
plus the length of this arc which is 3,
so I get a greedy score of 6.

82
00:05:07.450 --> 00:05:11.405
So by Dijkstra's greedy criterion,
we picked the edge (w,t) instead of

83
00:05:11.405 --> 00:05:15.666
the edge (v,t), and of course, that
doesn't matter who gets brought into X,

84
00:05:15.666 --> 00:05:18.600
but it does matter how we compute
the A and B values for T.

85
00:05:19.760 --> 00:05:24.410
So in the final iteration, we compute
(a,t) to be the Dijkstra's greedy

86
00:05:24.410 --> 00:05:28.940
score of the edge that we picked, which
is the edge (w,t), and the score was 6.

87
00:05:28.940 --> 00:05:32.220
So we compute the shortest path
distance from s to t to be 6.

88
00:05:32.220 --> 00:05:34.010
And then what is the path itself?

89
00:05:34.010 --> 00:05:38.330
Well, we inherit the shortest path to
the tail of the arc that we used to

90
00:05:38.330 --> 00:05:41.130
discover t, so
that's the shortest path to w,

91
00:05:41.130 --> 00:05:44.560
which we previously computed
as being the path through v.

92
00:05:44.560 --> 00:05:49.706
And then we append the edge we used to
discover t, so we append the edge (w,t).

93
00:05:49.706 --> 00:05:55.019
So the shortest path from s to t,
we're going to compute

94
00:05:55.019 --> 00:05:59.869
as the zigzag path,
s goes to v goes to w goes to t.

95
00:06:01.160 --> 00:06:04.420
And then now, dx is all the vertices,
we've computed it for

96
00:06:04.420 --> 00:06:06.190
everything, this is our final output.

97
00:06:06.190 --> 00:06:10.188
The contents of the, especially
the A array is the final output,

98
00:06:10.188 --> 00:06:15.200
shortest path distances from s to all
of the four possible destinations.

99
00:06:15.200 --> 00:06:18.540
And if you go back and compare this to
the example you went through the quiz,

100
00:06:18.540 --> 00:06:20.930
you will see at least on this example,

101
00:06:20.930 --> 00:06:25.550
indeed Dijkstra's algorithm corrects
the shortest path distances.

102
00:06:25.550 --> 00:06:27.880
Now I've said it before,
I'm going to say it again.

103
00:06:27.880 --> 00:06:30.690
Someone shows you their algorithm
works just on some examples,

104
00:06:30.690 --> 00:06:33.260
especially a pretty
simple four note example,

105
00:06:33.260 --> 00:06:36.400
you should not jump to the conclusion
that this algorithm always works.

106
00:06:36.400 --> 00:06:39.080
Sometimes algorithms work
fine on small examples, but

107
00:06:39.080 --> 00:06:41.950
break down once you go to more
interesting complicated examples.

108
00:06:41.950 --> 00:06:43.800
So I definitely owe you a proof.

109
00:06:43.800 --> 00:06:47.381
The Dijkstra's algorithm works not only
in this network, but in any network.

110
00:06:47.381 --> 00:06:49.343
And actually it doesn't
work in any network,

111
00:06:49.343 --> 00:06:52.390
it's only going to work in any network
with non-negative edge lengths.

112
00:06:52.390 --> 00:06:55.960
So to help you appreciate that, let's
conclude this video with a non example,

113
00:06:55.960 --> 00:06:58.870
showing what goes wrong
in Dijkstra's algorithm

114
00:06:58.870 --> 00:07:01.000
when you have networks with
negative edge lengths.

115
00:07:02.720 --> 00:07:05.090
So before I actually give
you a real non-example,

116
00:07:05.090 --> 00:07:07.320
let me just answer a preliminary question,
which you might have, and

117
00:07:07.320 --> 00:07:10.190
this would be a very good question if
it's something that has occurred to you.

118
00:07:10.190 --> 00:07:14.170
The question would be well, why are these
negative edge links such a big deal?

119
00:07:14.170 --> 00:07:18.210
Why can't we just reduce shortest path
computation with negative edge links

120
00:07:18.210 --> 00:07:22.200
to the problem of computing shortest paths
with non-negative edge links, right?

121
00:07:22.200 --> 00:07:23.840
So why don't we just
sort of clear things out?

122
00:07:23.840 --> 00:07:27.780
We just add a big number to all the edges,
that makes them all non-negative and

123
00:07:27.780 --> 00:07:29.760
then we just run Dijkstra's algorithm and
we're good to go.

124
00:07:31.060 --> 00:07:34.620
So this is exactly the sort of question
you should be looking to ask if

125
00:07:34.620 --> 00:07:37.190
as a computer scientist,
as a serious programmer.

126
00:07:37.190 --> 00:07:39.230
When confronted with a problem,
you always want to look for

127
00:07:39.230 --> 00:07:43.430
ways to reduce it to simpler problems
that you already know how to solve.

128
00:07:43.430 --> 00:07:47.330
And this is a very natural idea of how to
reduce a seemingly harder shortest path

129
00:07:47.330 --> 00:07:50.990
problem to one we already know how
to solve using Dijkstra's algorithm.

130
00:07:50.990 --> 00:07:53.730
The only problem is,
it doesn't quite work.

131
00:07:53.730 --> 00:07:56.080
Why doesn't it work?

132
00:07:56.080 --> 00:07:59.900
Well, let's say you have a graph, and
the most negative edge is minus ten.

133
00:07:59.900 --> 00:08:02.400
So, all the other edge links
are minus 10 and above.

134
00:08:02.400 --> 00:08:05.585
So then, what you want to do is add 10
to every single edge in the network, and

135
00:08:05.585 --> 00:08:07.842
that ensures that all
the lengths are non-negative.

136
00:08:07.842 --> 00:08:10.600
Run Dijkstra's algorithm,
get your shortest path.

137
00:08:10.600 --> 00:08:14.280
The issue is that different paths
between a common origin and

138
00:08:14.280 --> 00:08:17.390
destination have differing
numbers of edges.

139
00:08:17.390 --> 00:08:20.390
So, some might have five edges,
some might have two edges.

140
00:08:20.390 --> 00:08:22.560
Now, if you add 10 to every
single edge in the graph,

141
00:08:22.560 --> 00:08:25.480
you're going to change path
lengths by different amounts.

142
00:08:25.480 --> 00:08:29.850
If a path has five edges, it's going to go
up by 50 when you add 10 to every edge.

143
00:08:29.850 --> 00:08:31.560
If a path has only two edges,

144
00:08:31.560 --> 00:08:34.510
it's only going to go up by 20
when you add 10 to every edge.

145
00:08:34.510 --> 00:08:37.970
So as soon as you start changing the path
lengths of different paths by different

146
00:08:37.970 --> 00:08:41.880
amounts, you might actually screw
up which path is the shortest.

147
00:08:41.880 --> 00:08:44.430
The path which is shortest
of the new edge lengths

148
00:08:44.430 --> 00:08:47.370
need not be the one the shortest
under the old edge lengths.

149
00:08:47.370 --> 00:08:49.210
So that's why this reduction doesn't work.

150
00:08:51.070 --> 00:08:55.871
To be concrete, let's look at this
very simple three vertex graph where

151
00:08:55.871 --> 00:09:00.300
vertices s, v, and t and
edge lengths as shown 1, -5 and -2.

152
00:09:00.300 --> 00:09:03.880
Now what I hope is clear is that
in this graph, the shortest path,

153
00:09:03.880 --> 00:09:08.120
the one with the minimum length,
is the too hot path, s, v, t.

154
00:09:08.120 --> 00:09:10.450
That has length minus 4.

155
00:09:10.450 --> 00:09:14.630
The direct s,t arc has length minus 2,
which is bigger than minus 4.

156
00:09:14.630 --> 00:09:17.080
So the upper path is the shortest path.

157
00:09:17.080 --> 00:09:21.720
Now suppose we try to massage this by
adding a constant to every edge so

158
00:09:21.720 --> 00:09:24.030
that all edge links were non-negative.

159
00:09:24.030 --> 00:09:27.818
We have to add 5 to every edge, because
that's the biggest negative number,

160
00:09:27.818 --> 00:09:29.580
the (v,t) edge.

161
00:09:29.580 --> 00:09:36.520
So that would give us new edge
lengths of 6, and 0, and 3.

162
00:09:36.520 --> 00:09:41.428
And now the problem is, we have changed
which path is the shortest one.

163
00:09:41.428 --> 00:09:43.090
We added 10 to the top half and

164
00:09:43.090 --> 00:09:46.190
only 5 to the bottom half and
as a result, they've reversed.

165
00:09:46.190 --> 00:09:49.870
So now the bottom path (s,t) is
actually the shorter one, so

166
00:09:49.870 --> 00:09:52.760
if you run Dijkstra's on this graph,
it's going to come back with a path (s,t),

167
00:09:52.760 --> 00:09:56.090
even though that's not in fact
the shortest path in the original network,

168
00:09:56.090 --> 00:09:57.820
the one that we actually care about, okay.

169
00:09:57.820 --> 00:10:01.992
So that's why you can't just naively
reduce shortest paths with negative edge

170
00:10:01.992 --> 00:10:05.250
lengths to shortest paths with
non-negative edge lengths.

171
00:10:05.250 --> 00:10:09.540
Moreover, on this very same
super simple three nug graph,

172
00:10:09.540 --> 00:10:11.700
we can try running Dijkstra's
shortest path algorithm.

173
00:10:11.700 --> 00:10:13.810
It's perfectly well defined,
it'll produce some output,

174
00:10:13.810 --> 00:10:15.490
but it's actually going to be wrong.

175
00:10:15.490 --> 00:10:19.075
It is not going to compute shortest path
distances correctly in this graph, so

176
00:10:19.075 --> 00:10:20.840
let me show you why.

177
00:10:20.840 --> 00:10:24.520
Of course, the initialization will work as
it always does, so it's going to start by

178
00:10:24.520 --> 00:10:29.520
saying the shortest path distance from
s to itself is 0 by the empty path.

179
00:10:30.580 --> 00:10:31.740
And then, what's it going to do next?

180
00:10:31.740 --> 00:10:35.740
It's going to say, okay, well, we need to
enlarge the set capital, x, by one vertex,

181
00:10:35.740 --> 00:10:40.550
and there are two crossing edges as
the (x,v) edge and the (s,t) edge.

182
00:10:40.550 --> 00:10:41.540
And what's it going to do?

183
00:10:41.540 --> 00:10:44.080
It's going to use
the Dijkstra's greedy score.

184
00:10:44.080 --> 00:10:49.100
So, the score of this upper
edge is going to be 1,

185
00:10:49.100 --> 00:10:54.727
and the score of this bottom
edge is going to be minus 2.

186
00:10:54.727 --> 00:10:58.071
because remember, you take the previously
computed shortest path value of the tail,

187
00:10:58.071 --> 00:11:00.580
that is 0 in both cases, and
then you add the edge length.

188
00:11:00.580 --> 00:11:03.247
So the edge lengths are 1 and minus 2,
so the scores are 1 and minus 2.

189
00:11:03.247 --> 00:11:04.510
Which of these is smaller?

190
00:11:04.510 --> 00:11:09.100
Well evidently, the (s,t) arc
has the smaller score, minus 2.

191
00:11:09.100 --> 00:11:10.750
So what is Dijkstra's
algorithm going to do?

192
00:11:10.750 --> 00:11:13.680
It's going to say, yes,
let's go for this edge, (s,t).

193
00:11:13.680 --> 00:11:17.050
Let's bring T into the set capital X.

194
00:11:17.050 --> 00:11:18.800
T is now part of the conquered territory.

195
00:11:19.800 --> 00:11:23.040
And of course, as soon as you bring a node
into the set X, into conquered territory,

196
00:11:23.040 --> 00:11:25.690
you have to commit or
Dijkstra's algorithm chooses

197
00:11:25.690 --> 00:11:29.250
to commit to its shortest path
distance and its shortest path.

198
00:11:29.250 --> 00:11:33.520
What is the definition of its shortest
path distance, as computed by Dijkstra?

199
00:11:33.520 --> 00:11:35.470
Well it's just a greedy score.

200
00:11:35.470 --> 00:11:41.540
So it's going to assign the vertex t,
the shortest path distance of minus 2,

201
00:11:41.540 --> 00:11:45.980
and the path is going to be just the arc,
(s,t).

202
00:11:45.980 --> 00:11:48.260
But notice that this is in fact wrong.

203
00:11:48.260 --> 00:11:53.520
The shortest path distance from s
to t is not minus 2 in this graph.

204
00:11:53.520 --> 00:11:56.900
There's another path,
namely the one that goes through v,

205
00:11:56.900 --> 00:12:00.720
that has length minus 4,
less than minus 2.

206
00:12:00.720 --> 00:12:04.400
So Dijkstra computes incorrect
shortest path distances

207
00:12:04.400 --> 00:12:07.000
on this trivial three note graph.

208
00:12:07.000 --> 00:12:10.060
So to summarize the story so far,
we've described Dijkstra's algorithm.

209
00:12:10.060 --> 00:12:13.040
I've showed you that it works in a very
simple example that doesn't have

210
00:12:13.040 --> 00:12:14.060
negative edge lengths.

211
00:12:14.060 --> 00:12:17.130
And I've showed you that it doesn't
work in an even simpler example that

212
00:12:17.130 --> 00:12:18.720
does have negative edge lengths.

213
00:12:18.720 --> 00:12:22.208
So I've both given you some plausibility
that it might work generally, at least for

214
00:12:22.208 --> 00:12:26.510
non negative edge lengths, but I've
also tried to sow some seeds of doubt.

215
00:12:26.510 --> 00:12:29.660
That it's not at all clear at this
point if Dijkstra's algorithm is always

216
00:12:29.660 --> 00:12:32.218
correct or not, even if you
have non negative edge lengths.

217
00:12:32.218 --> 00:12:32.986
And certainly,

218
00:12:32.986 --> 00:12:37.050
if it is always correct, there better
be a foolproof argument for why.

219
00:12:37.050 --> 00:12:40.190
You should be demanding
an explanation of a claim

220
00:12:40.190 --> 00:12:42.970
that Dijkstra is correct
in any kind of generality.

221
00:12:42.970 --> 00:12:44.560
That's the subject of the next video.