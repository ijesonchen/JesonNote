WEBVTT

1
00:00:00.320 --> 00:00:03.130
We've arrived at another one of
computer science's greatest hits,

2
00:00:03.130 --> 00:00:06.310
namely Djikstra's shortest path algorithm.

3
00:00:06.310 --> 00:00:07.460
So let me tell you about the problem,

4
00:00:07.460 --> 00:00:10.570
it's a problem called single
source shortest paths.

5
00:00:10.570 --> 00:00:13.520
Basically what we want to do is compute
something like driving directions.

6
00:00:13.520 --> 00:00:15.180
So we're given as input a graph,

7
00:00:15.180 --> 00:00:17.660
in this lecture I'm going to
work with directed graphs,

8
00:00:17.660 --> 00:00:21.219
although the same algorithm would work for
undirected graphs with cosmetic changes.

9
00:00:22.690 --> 00:00:25.630
As usual, we'll use m to
denote the number of edges and

10
00:00:25.630 --> 00:00:26.920
n to denote the number of vertices.

11
00:00:28.560 --> 00:00:31.600
The input also includes
two extra ingredients.

12
00:00:31.600 --> 00:00:35.960
First of all, for each edge e we're
given as input a non-negative link

13
00:00:35.960 --> 00:00:37.576
which I'll denote as l sub e.

14
00:00:37.576 --> 00:00:40.500
In the context of a driving
directions application

15
00:00:40.500 --> 00:00:45.280
l sub e could denote the mileage how
long this particular road is, or

16
00:00:45.280 --> 00:00:48.180
it could also denote the expected
travel time along the edge.

17
00:00:49.610 --> 00:00:53.730
The second ingredient is a vertex
from which we are looking for paths.

18
00:00:53.730 --> 00:00:56.370
This is exactly the same as we
had in breadth first search.

19
00:00:56.370 --> 00:00:58.920
In that first search we
have an originating vertex

20
00:00:58.920 --> 00:01:00.530
which we'll call here the source.

21
00:01:01.700 --> 00:01:07.350
Our responsibility then is to, given this
input, to compute for every other vertex,

22
00:01:07.350 --> 00:01:11.560
v, in this network the length of
the shortest path from the source vertex,

23
00:01:11.560 --> 00:01:13.930
s, to that destination vertex, v.

24
00:01:15.180 --> 00:01:16.110
And so just to be clear,

25
00:01:16.110 --> 00:01:18.890
what is the length of the path
that has say three edges in it?

26
00:01:18.890 --> 00:01:23.110
Well it's just the sum of the link of the
first edge in the path plus the length of

27
00:01:23.110 --> 00:01:26.230
the second edge in the path plus
the length of the third edge in the path.

28
00:01:27.520 --> 00:01:32.190
So if you had a path like this with
three edges and length one, two and

29
00:01:32.190 --> 00:01:36.020
three, then the length of
the path would just be six.

30
00:01:36.020 --> 00:01:39.910
And then we define the shortest SV path
in the natural way, so amongst all of

31
00:01:39.910 --> 00:01:44.620
the paths directed from S to V, each one
has its own respective path length and

32
00:01:44.620 --> 00:01:50.990
then the minimum overall SV paths is
the shortest path distance in the graph G.

33
00:01:50.990 --> 00:01:53.030
So I'm going to make two assumptions for
these lectures.

34
00:01:53.030 --> 00:01:56.680
One is just really for convenience,
the other is really important.

35
00:01:56.680 --> 00:01:58.010
The other assumption, without which,

36
00:01:58.010 --> 00:02:00.120
Dijkstra's algorithm is not correct,
as we'll see.

37
00:02:01.240 --> 00:02:04.360
So for convenience we'll assume
that there is a directed path from

38
00:02:04.360 --> 00:02:06.670
S to every other vertex V in the graph,

39
00:02:06.670 --> 00:02:09.980
otherwise the shortest path distance is
something we define to be plus infinity.

40
00:02:09.980 --> 00:02:12.300
And the reason this is
not a big assumption is,

41
00:02:12.300 --> 00:02:15.820
if you think about it, you could detect
which vertices are not reachable from

42
00:02:15.820 --> 00:02:20.120
S just in a preprocessing step using,
say, breadth-first or depth-first search.

43
00:02:20.120 --> 00:02:22.420
And then you could delete
the irrelevant part of the graph, and

44
00:02:22.420 --> 00:02:25.850
run Dijkstra's algorithm as we'll
describe it on what remains.

45
00:02:25.850 --> 00:02:29.670
Alternatively, Dijkstra's algorithm
will quite naturally figure out

46
00:02:29.670 --> 00:02:33.030
what vertices there are paths to from
S and which ones there are not, so

47
00:02:33.030 --> 00:02:34.310
this won't really come up.

48
00:02:34.310 --> 00:02:37.460
So to keep it simple,
just think about we have an input graph

49
00:02:37.460 --> 00:02:40.820
where you can get from S to V,
for every different vertex V.

50
00:02:40.820 --> 00:02:44.800
And the challenge then is amongst
all the ways to get from S to V,

51
00:02:44.800 --> 00:02:46.340
what is the shortest way to do it?

52
00:02:47.540 --> 00:02:50.310
So the second assumption already
appears in the problem statement, but

53
00:02:50.310 --> 00:02:52.630
I want to reiterate it just so
it's really clear.

54
00:02:54.840 --> 00:02:57.720
When we analyze Jackson's algorithm,
we always focus on

55
00:02:57.720 --> 00:03:01.910
graphs where every length is non-negative,
no negative edge lengths are allowed.

56
00:03:01.910 --> 00:03:04.180
And we'll see why a little
bit later in the video.

57
00:03:05.710 --> 00:03:08.630
Now in the context of a driving
directions application

58
00:03:08.630 --> 00:03:12.300
it's natural to ask the question why would
you ever care about negative edge lengths.

59
00:03:12.300 --> 00:03:15.210
Until we invent a time machine
that doesn't seem like

60
00:03:15.210 --> 00:03:17.880
negative edge lengths are going to be
relevant when you are computing literal

61
00:03:17.880 --> 00:03:19.570
paths through literal networks.

62
00:03:19.570 --> 00:03:23.580
But again remember that paths can be
thought of as more abstractly as a just

63
00:03:23.580 --> 00:03:25.150
sequence of decisions.

64
00:03:25.150 --> 00:03:28.090
And some of the most powerful
applications of shortest paths

65
00:03:28.090 --> 00:03:31.600
are coming up with optimal
weight such sequences.

66
00:03:31.600 --> 00:03:35.000
So, for example, maybe you're engaging
in financial transactions and

67
00:03:35.000 --> 00:03:39.370
you have the option of both buying and
selling assets at different times.

68
00:03:39.370 --> 00:03:41.240
If you sell then you get
some kind of profit and

69
00:03:41.240 --> 00:03:43.460
that would correspond to
a negative edge length.

70
00:03:43.460 --> 00:03:46.548
So there are quite interesting
applications in which negative edge

71
00:03:46.548 --> 00:03:48.110
lengths are relevant.

72
00:03:48.110 --> 00:03:50.450
If you are dealing with
such an application,

73
00:03:50.450 --> 00:03:53.000
Dijkstra's algorithm is
not the algorithm to use.

74
00:03:53.000 --> 00:03:55.440
There's a different shortest path
algorithm, a couple other ones.

75
00:03:55.440 --> 00:03:57.930
But the most well-known one
is called Bellman-Ford.

76
00:03:57.930 --> 00:04:00.090
That's something based
on dynamic programming,

77
00:04:00.090 --> 00:04:02.470
which we may well cover in a SQL course.

78
00:04:02.470 --> 00:04:05.470
Okay, so for Dijkstra's algorithm,
we always focus on graphs.

79
00:04:05.470 --> 00:04:10.604
That'll have only
non-negative edge lengths.

80
00:04:10.604 --> 00:04:13.360
So, with the next quiz, I just want to
make sure that you understand the single

81
00:04:13.360 --> 00:04:15.100
source shortest path problem.

82
00:04:15.100 --> 00:04:18.920
Let me draw for you here a simple
four node network, and ask you for,

83
00:04:18.920 --> 00:04:21.160
what are the four shortest path lengths.

84
00:04:21.160 --> 00:04:25.480
So from the source vertex s, to each
of the four vertices in the network.

85
00:04:25.480 --> 00:04:29.980
All right, so the answer to this
quiz is the final option, 0,1,3,6.

86
00:04:29.980 --> 00:04:34.170
To see why that's true, well,

87
00:04:34.170 --> 00:04:38.730
all of the options had 0 as the
shortest-path distance from s to itself.

88
00:04:38.730 --> 00:04:41.970
So that just seemed kind of obvious.

89
00:04:41.970 --> 00:04:46.720
So the empty path will get you from
s to itself and have 0 length.

90
00:04:46.720 --> 00:04:50.600
No suppose you wanted to get from S to V,
well there's actually only one way to do

91
00:04:50.600 --> 00:04:53.450
that, you have to go
along this one hop path.

92
00:04:53.450 --> 00:04:59.850
So the only path has length of one, so the
shortest path distance from S to V is one.

93
00:04:59.850 --> 00:05:03.980
Now W's more interesting,
there's a direct one hop path, SW,

94
00:05:03.980 --> 00:05:08.400
that has a length of four, but
that is not the shortest path from S to

95
00:05:08.400 --> 00:05:13.640
W Inf act to two-hop path that goes
through v as an intermediary has

96
00:05:13.640 --> 00:05:18.500
total path length three which is less than
the length of the direct arc from s to w.

97
00:05:18.500 --> 00:05:23.170
So therefore the shortest distance
from s to w is going to be 3.

98
00:05:23.170 --> 00:05:28.250
And finally for the vertex t there's
three different paths going from s to t.

99
00:05:28.250 --> 00:05:30.970
There's the two-hop path
that goes through v.

100
00:05:30.970 --> 00:05:34.290
There's the two hop path which goes
through w, both of those have path length

101
00:05:34.290 --> 00:05:38.080
7, and then there's the three hop
path which goes through both v and w.

102
00:05:38.080 --> 00:05:42.480
And that actually has a path length of
one plus two plus three equals six.

103
00:05:42.480 --> 00:05:46.245
So despite having a largest number of
edges, the zigzag path is, in fact,

104
00:05:46.245 --> 00:05:49.225
the shortest path from s to t and
it has length 6.

105
00:05:49.225 --> 00:05:53.565
All right, so before I tell you
how Dijstrka's algorthin works,

106
00:05:53.565 --> 00:05:56.365
I feel like I should justify
the existence of this video a little bit.

107
00:05:56.365 --> 00:05:57.005
All right?

108
00:05:57.005 --> 00:05:59.965
Because this is not the first
time we've seen shortest paths.

109
00:05:59.965 --> 00:06:01.625
You might be thinking rightfully so.

110
00:06:01.625 --> 00:06:03.625
We already know how to
compute shortest paths.

111
00:06:03.625 --> 00:06:05.519
That was one of the applications
of breadth first search.

112
00:06:07.050 --> 00:06:09.620
So the answer to this
question is both yes and no.

113
00:06:09.620 --> 00:06:12.790
Breadth first search does
indeed compute shortest paths.

114
00:06:12.790 --> 00:06:14.870
We had an entire video about that.

115
00:06:14.870 --> 00:06:18.520
But it works only in the special
case where the length

116
00:06:18.520 --> 00:06:20.910
of every edge of the graph is one.

117
00:06:22.470 --> 00:06:25.000
At the moment we're trying to
solve a more general problem.

118
00:06:25.000 --> 00:06:26.769
We're trying to solve shortest paths,

119
00:06:26.769 --> 00:06:29.433
when edges can have arbitrary
non-negative edge lengths.

120
00:06:30.818 --> 00:06:35.215
So for example, in the graph that
we've explored in the previous quiz,

121
00:06:35.215 --> 00:06:38.892
if we ran breadth first search,
starting from the vertex s,

122
00:06:38.892 --> 00:06:42.639
it would say that the shortest
path distance from s to t is 2 and

123
00:06:42.639 --> 00:06:46.650
that's because there's a path
with two hops going from s to t.

124
00:06:46.650 --> 00:06:50.370
Put differently,
t is in the second layer emanating from s.

125
00:06:50.370 --> 00:06:53.280
But as we saw in the quiz,
there's not in fact

126
00:06:53.280 --> 00:06:57.650
a shortest two hop path from s to t
if you care about the edge lengths.

127
00:06:57.650 --> 00:07:01.750
Rather the minimum length path, the
shortest path, with respect to the edge

128
00:07:01.750 --> 00:07:05.830
weights, is this three hop path
which gives us a total length of 6.

129
00:07:05.830 --> 00:07:08.740
So breadth first search is not
going to give us what we want

130
00:07:08.740 --> 00:07:12.000
when the edge lengths
are not all the same.

131
00:07:12.000 --> 00:07:16.220
And if you think about an application like
driving directions, then needless to say,

132
00:07:16.220 --> 00:07:19.090
it's not the case that every
edge in the network is the same.

133
00:07:19.090 --> 00:07:20.920
Some roads are much longer than others,

134
00:07:20.920 --> 00:07:23.520
some roads will have much larger
travel times than others, so

135
00:07:23.520 --> 00:07:26.980
we really do need to solve this
more general shortest path problem.

136
00:07:26.980 --> 00:07:30.035
Similarly, if you're thinking more
abstractly about a sequence of decisions

137
00:07:30.035 --> 00:07:31.650
like financial transactions,

138
00:07:31.650 --> 00:07:34.290
in general different transactions
will have different values.

139
00:07:34.290 --> 00:07:36.446
So you really want to solve
general shortest paths,

140
00:07:36.446 --> 00:07:39.290
you're not in the special case
that breadth-first search solves.

141
00:07:40.870 --> 00:07:43.010
Now, if you're feeling
particularly sharp today,

142
00:07:43.010 --> 00:07:46.120
you might have the following
objection to what I've just said.

143
00:07:46.120 --> 00:07:47.720
You might say, eh, big deal.

144
00:07:48.850 --> 00:07:52.540
General edge weights, unit edge weights,
it's basically the same.

145
00:07:52.540 --> 00:07:54.291
Say you have an edge
that has length three.

146
00:07:54.291 --> 00:07:58.954
How is that fundamentally different
than having a path with three edges,

147
00:07:58.954 --> 00:08:00.843
each of which has length one?

148
00:08:00.843 --> 00:08:05.910
So why not just replace all the edges with
a path of edges of the appropriate length?

149
00:08:05.910 --> 00:08:08.482
Now we have a network in which
every edge has unit length and

150
00:08:08.482 --> 00:08:10.437
now we can just run breadth-first search.

151
00:08:10.437 --> 00:08:16.169
So put succinctly, isn't it the case that
computing shortest paths with general

152
00:08:16.169 --> 00:08:21.417
edge weights reduces to computing
shortest paths with unit edge weights?

153
00:08:21.417 --> 00:08:24.634
Well, the first comment I want to make
is I think this would be an excellent

154
00:08:24.634 --> 00:08:25.600
objection to raise.

155
00:08:25.600 --> 00:08:27.883
And indeed, as programmers,
as computer scientists,

156
00:08:27.883 --> 00:08:29.460
this is the way you should be thinking.

157
00:08:29.460 --> 00:08:32.921
If you see a problem that seems
superficially harder than another one,

158
00:08:32.921 --> 00:08:36.494
you always want to ask, well, maybe
just with a clever trick I can reduce it

159
00:08:36.494 --> 00:08:38.476
to a problem I already know how to solve.

160
00:08:38.476 --> 00:08:41.180
That's a great attitude in general for
problem solving.

161
00:08:41.180 --> 00:08:44.960
And indeed, if all of the edge lengths
were just small numbers, like 1, 2, and

162
00:08:44.960 --> 00:08:47.550
3 and so on, this trick would work fine.

163
00:08:49.100 --> 00:08:51.820
The issue is when you have a network
where the different edges can have very

164
00:08:51.820 --> 00:08:52.990
different lengths.

165
00:08:52.990 --> 00:08:55.910
And that's certainly the case
in many applications.

166
00:08:55.910 --> 00:08:58.720
Definitely road networks would be
one where you have both sort of long

167
00:08:58.720 --> 00:09:00.830
highways and
you have neighborhood streets.

168
00:09:00.830 --> 00:09:04.474
And potentially in financial transaction
based networks you would also have a wide

169
00:09:04.474 --> 00:09:06.986
variance between the value
of different transactions.

170
00:09:06.986 --> 00:09:09.660
And the problem then is some of these
edge lengths might be really big.

171
00:09:09.660 --> 00:09:11.704
They might be 100, they might be 1,000.

172
00:09:11.704 --> 00:09:16.150
It's very hard to put operating bounds on
how large these edge weights could be.

173
00:09:16.150 --> 00:09:20.770
So if you start wantonly replacing single
edges with these really long paths

174
00:09:20.770 --> 00:09:24.380
of like 1,000, you've blown up
the size of your graph way too much.

175
00:09:24.380 --> 00:09:27.580
So you do have a faithful
representation of your old network, but

176
00:09:27.580 --> 00:09:29.030
it's too wasteful.

177
00:09:29.030 --> 00:09:31.305
So even though breadth-first
search runs in linear time,

178
00:09:31.305 --> 00:09:33.170
it's now on this much larger graph.

179
00:09:33.170 --> 00:09:35.430
And we'd much prefer something
which is linear time or

180
00:09:35.430 --> 00:09:38.880
almost linear time that works
directly on the original graph.

181
00:09:38.880 --> 00:09:42.250
And that is exactly what
Dijkstra's shortest-path algorithm

182
00:09:42.250 --> 00:09:43.159
is going to accomplish.

183
00:09:44.780 --> 00:09:48.170
Let's now move on to the pseudocode for
Dijkstra's shortest path algorithm.

184
00:09:49.400 --> 00:09:52.776
So this is another one of those algorithms
where no matter how many times I explain

185
00:09:52.776 --> 00:09:54.577
it, it's always just super fun to teach.

186
00:09:54.577 --> 00:09:58.929
And the main reason is because it exposes
the beauty that pops up in good algorithm

187
00:09:58.929 --> 00:09:59.444
design.

188
00:09:59.444 --> 00:10:02.910
So the pseudocode, as you'll see in
a second, is itself very elegant.

189
00:10:02.910 --> 00:10:06.240
We're just going to have one loop, and in
each iteration of the loop we will compute

190
00:10:06.240 --> 00:10:09.010
the shortest path distance
to one additional vertex.

191
00:10:09.010 --> 00:10:12.383
And by the end of the loop we'll compute
shortest path distances to everybody.

192
00:10:12.383 --> 00:10:16.879
The proof of correctness, which we'll do
in the next video, is a little bit subtle,

193
00:10:16.879 --> 00:10:19.009
but also quite natural, quite pretty.

194
00:10:19.009 --> 00:10:22.950
And then finally, Dijkstra's algorithm
will give us our first opportunity to see

195
00:10:22.950 --> 00:10:27.220
the interplay between good algorithm
design and good data structure design.

196
00:10:27.220 --> 00:10:30.670
So with a suitable application
of the heap data structure,

197
00:10:30.670 --> 00:10:34.660
we'll be able to implement Dijkstra's
algorithm so it runs blazingly fast,

198
00:10:34.660 --> 00:10:39.300
almost linear time, namely m times log n.

199
00:10:39.300 --> 00:10:40.740
But I'm getting little ahead of myself.

200
00:10:40.740 --> 00:10:42.235
Let me actually show you this pseudocode.

201
00:10:43.460 --> 00:10:46.500
At a high level, you really should think
of Dijkstra's algorithm as being a close

202
00:10:46.500 --> 00:10:47.990
cousin of breadth-first search.

203
00:10:47.990 --> 00:10:50.770
And indeed, if all of the edge
lengths are equal to one,

204
00:10:50.770 --> 00:10:53.180
Dijkstra's algorithm becomes
breadth-first search.

205
00:10:53.180 --> 00:10:55.945
So this is sort of a slick
generalization of breadth-first search

206
00:10:55.945 --> 00:10:58.375
when edges can have different lengths.

207
00:10:58.375 --> 00:11:01.275
So like our generic graph search
procedures, we're going to start at

208
00:11:01.275 --> 00:11:05.685
the source vertex s, and in each iteration
we're going to conquer one new vertex.

209
00:11:05.685 --> 00:11:09.215
And we'll do that once each iteration
after m minus1 iteration, we'll be done.

210
00:11:09.215 --> 00:11:12.791
And in each iteration will correctly
compute the shortest path distance

211
00:11:12.791 --> 00:11:14.911
to one new possible destination vertex v.

212
00:11:16.230 --> 00:11:18.670
So let me just start by
initializing some notation.

213
00:11:20.220 --> 00:11:23.880
So capital X is going to denote
the vertices that we've dealt with so far.

214
00:11:23.880 --> 00:11:27.470
And by dealt with, I mean we've correctly
computed shortest path distance

215
00:11:27.470 --> 00:11:30.790
from the source vertex
to every vertex in X.

216
00:11:30.790 --> 00:11:34.890
We're going to augment X by one new vertex
in each iteration of the main loop.

217
00:11:35.900 --> 00:11:39.790
Remember that we're responsible for
outputting n numbers, one for each vertex.

218
00:11:39.790 --> 00:11:42.340
We're not just computing one thing,
we're computing the shortest path distance

219
00:11:42.340 --> 00:11:45.530
from the source vertex s
to every other vertex.

220
00:11:45.530 --> 00:11:49.150
So I'm going to frame the output
in terms of this array capital A.

221
00:11:49.150 --> 00:11:51.740
So for each vertex, we're going to
have an entry in the array A,

222
00:11:51.740 --> 00:11:53.930
and the goal is at
the end of the algorithm,

223
00:11:53.930 --> 00:11:56.580
A will be populated with the correct
shortest path distances.

224
00:11:58.420 --> 00:12:00.660
Now to help you understand
Dijkstra's algorithm,

225
00:12:00.660 --> 00:12:03.970
I'm going to do some additional
bookkeeping which you would not do

226
00:12:03.970 --> 00:12:06.290
in a real implementation
of Dijkstra's algorithm.

227
00:12:06.290 --> 00:12:09.725
Specifically, in addition to
this array capital A in which we

228
00:12:09.725 --> 00:12:14.481
compute shortest path distances from the
source vertex to every other destination,

229
00:12:14.481 --> 00:12:17.915
there's going to be an array
capital B in which we'll keep track

230
00:12:17.915 --> 00:12:22.497
of the actual shortest path itself from
the source vertex s to each destination v.

231
00:12:22.497 --> 00:12:25.226
So the arrays A and
B will be indexed in the same way.

232
00:12:25.226 --> 00:12:28.441
There'll be one entry for
each possible destination vertex v.

233
00:12:28.441 --> 00:12:33.100
Capital A will store just a number for
each destination, shortest path distance.

234
00:12:33.100 --> 00:12:36.140
The array B in each position
will store an actual path,

235
00:12:36.140 --> 00:12:38.180
so the shortest path from s to V.

236
00:12:38.180 --> 00:12:41.640
But again, you would not include
this in an actual implementation.

237
00:12:41.640 --> 00:12:45.860
I just find in my experience it's easier
for students to understand this algorithm

238
00:12:45.860 --> 00:12:47.990
if we think of the paths
being carried along as well.

239
00:12:49.330 --> 00:12:51.620
So now that I've told you
the semantics of these two arrays,

240
00:12:51.620 --> 00:12:56.850
I hope it's no surprise how we initialize
them for the source vertex itself, s.

241
00:12:56.850 --> 00:12:59.610
The shortest path distance
from s to itself is 0.

242
00:12:59.610 --> 00:13:02.330
The empty path gets you
from s to s with length 0.

243
00:13:02.330 --> 00:13:04.020
There's no negative edges by assumption,
so

244
00:13:04.020 --> 00:13:08.770
there's no way you can get from s back
to s with a non-positive length, so

245
00:13:08.770 --> 00:13:11.220
this is definitely the shortest
path distance for s.

246
00:13:11.220 --> 00:13:12.280
By the same reasoning,

247
00:13:12.280 --> 00:13:16.540
the shortest path from s to s is just the
empty path, the path with no edges in it.

248
00:13:17.850 --> 00:13:19.880
So now let's proceed to
the main while loop.

249
00:13:21.150 --> 00:13:25.191
So the plan is we want to grow this set
capital X like a mold until it covers

250
00:13:25.191 --> 00:13:26.296
the entire graph.

251
00:13:26.296 --> 00:13:29.999
So in each iteration, it's going to
grow and cover up one new vertex and

252
00:13:29.999 --> 00:13:31.923
that vertex will then be processed.

253
00:13:31.923 --> 00:13:34.620
And at the time of processing,
we're responsible for

254
00:13:34.620 --> 00:13:37.667
computing the shortest path
distance from s to this vertex and

255
00:13:37.667 --> 00:13:41.260
also figuring out what the actual
shortest path from s to this vertex is.

256
00:13:42.600 --> 00:13:46.910
So in each iteration, we need to grow X by
one node to ensure that we make progress.

257
00:13:46.910 --> 00:13:50.100
So the obvious question is,
which node should we pick?

258
00:13:50.100 --> 00:13:51.580
Which one do we add to X next?

259
00:13:52.710 --> 00:13:54.540
So there's going to be two ideas here.

260
00:13:54.540 --> 00:13:57.320
The first one we've already seen in terms
of all of these generic graph search

261
00:13:57.320 --> 00:14:00.390
procedures, which is we're
going to look at the edges and

262
00:14:00.390 --> 00:14:02.140
the vertices which are on the frontier.

263
00:14:02.140 --> 00:14:05.750
So we're going to look at the vertices
that are just one hop away

264
00:14:05.750 --> 00:14:07.750
from vertices we've already put into X.

265
00:14:09.200 --> 00:14:11.930
So that motivates that a given
iteration of the while loop

266
00:14:11.930 --> 00:14:15.090
to look at the stuff we've
already process, that's X, and

267
00:14:15.090 --> 00:14:18.920
the stuff we haven't already processed,
that's v minus X.

268
00:14:18.920 --> 00:14:21.610
s, of course, starts in X and
we never take anything out of X, so

269
00:14:21.610 --> 00:14:22.990
s is still there.

270
00:14:22.990 --> 00:14:24.820
In some generic iteration
of the while loop,

271
00:14:24.820 --> 00:14:27.760
we might have some other
vertices that are in X.

272
00:14:27.760 --> 00:14:30.322
And in a generic iteration
of this while loop,

273
00:14:30.322 --> 00:14:33.226
there might be multiple
vertices which are not in X.

274
00:14:33.226 --> 00:14:37.361
And now, as we've seen in our graph
search procedures, there are general or

275
00:14:37.361 --> 00:14:38.769
edges crossing this cut.

276
00:14:38.769 --> 00:14:42.683
So there are edges which have one endpoint
in each side, one endpoint in X and

277
00:14:42.683 --> 00:14:44.660
one endpoint outside of X.

278
00:14:44.660 --> 00:14:47.190
This is a directed graph so
they can cross in two directions.

279
00:14:47.190 --> 00:14:50.149
They can cross from left to right or
they can cross from right to left.

280
00:14:51.410 --> 00:14:53.650
So you might have some
edges internal to X.

281
00:14:53.650 --> 00:14:56.100
Those are things we don't
care about at this point.

282
00:14:56.100 --> 00:14:58.130
You might have edges which
are internal to v- X.

283
00:14:58.130 --> 00:15:00.993
We also don't care about those,
at least not quite yet.

284
00:15:00.993 --> 00:15:05.525
And then you got edges which
can cross from X to v-X,

285
00:15:05.525 --> 00:15:12.810
as well as edges that can cross in the
reverse direction, from v -X back to X.

286
00:15:12.810 --> 00:15:15.770
And the ones we're going to be interested
in, just like when we did graph search and

287
00:15:15.770 --> 00:15:19.180
directed graphs,
are the edges crossing from left to right,

288
00:15:19.180 --> 00:15:23.000
the edges whose tail is amongst
the vertices we've already seen and

289
00:15:23.000 --> 00:15:26.170
whose head is some not yet
explored vertex.

290
00:15:28.250 --> 00:15:33.129
So the first idea is that in each
iteration of the while loop we scan, or

291
00:15:33.129 --> 00:15:37.616
we examine, all of the edges with
tail in X and head outside of X.

292
00:15:37.616 --> 00:15:42.358
One of those is going to lead us
to the vertex that we pick next.

293
00:15:42.358 --> 00:15:44.695
So that's the first idea, but
now we need a second idea,

294
00:15:44.695 --> 00:15:46.461
because this is again
quite underdetermined.

295
00:15:46.461 --> 00:15:50.139
There could be multiple such
vertices which meet this criterion.

296
00:15:50.139 --> 00:15:54.083
So for example, in the cartoon in
the bottom left part of this slide,

297
00:15:54.083 --> 00:15:56.803
you'll notice that
there's one vertex here.

298
00:15:56.803 --> 00:16:00.205
Which is the head of an arc that
crosses from left to right.

299
00:16:00.205 --> 00:16:02.624
And there's yet
another vertex down here in v minus x,

300
00:16:02.624 --> 00:16:06.050
which again is the head of an arc
which crosses from left to right.

301
00:16:06.050 --> 00:16:10.330
There are two options of which of
those two to suck into our set x and

302
00:16:10.330 --> 00:16:13.000
we might want some guidance
about which one to pick next.

303
00:16:13.000 --> 00:16:17.100
The key idea in Dijkstra is
to give each vertex a score

304
00:16:17.100 --> 00:16:21.810
corresponding to how close that vertex
seems to the source vertex s, and

305
00:16:21.810 --> 00:16:27.660
then to pick among all candidate vertices,
the one that has the minimum score.

306
00:16:27.660 --> 00:16:28.700
Let me be more precise.

307
00:16:30.010 --> 00:16:33.970
Among all crossing edges, with tail on
the left side and head on the right side,

308
00:16:33.970 --> 00:16:40.540
we pick the edge that minimizes
the following criterion.

309
00:16:40.540 --> 00:16:44.460
The shortest path distance that we've
previously computed from s to the vertex

310
00:16:44.460 --> 00:16:51.600
v, plus the length of the edge
that connects v to w.

311
00:16:52.930 --> 00:16:55.060
This is quite an important expression, so

312
00:16:55.060 --> 00:16:57.619
I will call this Dijkstra's
greedy criterion.

313
00:16:58.740 --> 00:17:02.750
This is a very good idea to
use this method to choose

314
00:17:02.750 --> 00:17:05.390
which vertex to add to the set x,
as we'll see.

315
00:17:06.840 --> 00:17:10.910
I need to give a name to this edge
which minimizes this quantity over all

316
00:17:10.910 --> 00:17:11.500
crossing edges.

317
00:17:11.500 --> 00:17:14.140
Let's call it v star w star.

318
00:17:15.780 --> 00:17:18.150
For example,
in the cartoon in the bottom left,

319
00:17:18.150 --> 00:17:22.030
maybe of the two edges crossing from
left to right, maybe the top one

320
00:17:22.030 --> 00:17:25.878
is the one that has a smaller value
of Dijkstra's greedy criterion.

321
00:17:25.878 --> 00:17:29.300
In that case,
this would be the vertex v star and

322
00:17:29.300 --> 00:17:32.600
the other end of the edge
would be the vertex w star.

323
00:17:32.600 --> 00:17:35.390
This edge, v star,
w star is going to do wonders for us.

324
00:17:35.390 --> 00:17:38.780
It will both guide us to the vertex
that we should add the x next,

325
00:17:38.780 --> 00:17:40.460
that's going to be w star.

326
00:17:40.460 --> 00:17:43.480
It's going to tell us how we should
compute the shortest path distance to w

327
00:17:43.480 --> 00:17:48.360
star, as well as what the actual
shortest path from s to w star is.

328
00:17:48.360 --> 00:17:52.350
Specifically, in this iteration of the
wild loop, after we've chosen this edge v

329
00:17:52.350 --> 00:17:56.940
star w star, we add w star to x.

330
00:17:57.970 --> 00:18:01.930
Remember, by definition,
w star was previously not in capitol X.

331
00:18:01.930 --> 00:18:05.550
We're making progress by adding it to x,
that's one more vertex in x.

332
00:18:06.830 --> 00:18:10.270
Now x is supposed to represent all of
the nodes that we've already processed.

333
00:18:10.270 --> 00:18:14.310
So an environ of this algorithm is that
we've computed shortest path distances for

334
00:18:14.310 --> 00:18:16.820
everybody in x as well as
the actual shortest paths.

335
00:18:16.820 --> 00:18:20.400
Now that we're putting w star in x, we're
responsible for all this information,

336
00:18:20.400 --> 00:18:21.850
the shortest path information.

337
00:18:22.860 --> 00:18:27.963
What we're going to do is we're
going to set the r estimate

338
00:18:27.963 --> 00:18:33.160
of w star's shortest path
distance from s to be equal to

339
00:18:33.160 --> 00:18:36.720
the value of this Dijkstra's
greedy criterion for this edge.

340
00:18:36.720 --> 00:18:41.650
That is, whatever our previously computed
shortest path distance from s to v star

341
00:18:41.650 --> 00:18:47.230
was plus the length of the direct
edge from v star to w star.

342
00:18:47.230 --> 00:18:50.750
Now a key point is to realize
that this code does make sense.

343
00:18:50.750 --> 00:18:51.430
By which I mean,

344
00:18:51.430 --> 00:18:56.055
if you think about this quantity A(v),
this is been previously computed.

345
00:18:56.055 --> 00:18:59.810
And that's because environ of this
algorithm is we've always computed

346
00:18:59.810 --> 00:19:03.520
shortest path distances to
everything that is in capital X.

347
00:19:03.520 --> 00:19:07.160
And of course, the same thing holds when
we need to assign w star shortest path

348
00:19:07.160 --> 00:19:10.500
distance because v star
was a member of capital X,

349
00:19:10.500 --> 00:19:12.660
we had already computed its
shortest path distance.

350
00:19:12.660 --> 00:19:17.460
So we can just look up the v star
entry position in the array a.

351
00:19:17.460 --> 00:19:19.590
Over in our picture on our left,
we would just say,

352
00:19:19.590 --> 00:19:22.510
what did we compute the shortest
path distance to v star previously?

353
00:19:22.510 --> 00:19:23.450
Maybe it's something like 17.

354
00:19:23.450 --> 00:19:28.260
And then we'd say, what is the length of
this direct edge from v star to w star?

355
00:19:28.260 --> 00:19:29.490
Maybe that's 6.

356
00:19:29.490 --> 00:19:31.850
Then we would just add 17 and 6 and

357
00:19:31.850 --> 00:19:35.540
we would put 23 as our estimate of the
shortest path distance from s to w star.

358
00:19:36.720 --> 00:19:41.460
We do something analogous with
the shortest path itself in the array b.

359
00:19:41.460 --> 00:19:45.880
That is, again, we're responsible,
since we just added w star to capital X,

360
00:19:45.880 --> 00:19:51.490
we're responsible for suggesting a path
from s to w star in the b array.

361
00:19:51.490 --> 00:19:56.450
What we're going to do is we're just going
to inherit the previously computed path

362
00:19:56.450 --> 00:20:00.310
to v star and we're just going to
tack on the end one extra hop,

363
00:20:00.310 --> 00:20:02.480
namely the direct edge
from v star to w star.

364
00:20:02.480 --> 00:20:07.150
That will give us a path from s
all the way to w star via v star

365
00:20:07.150 --> 00:20:12.180
as an intermediate pit stop and that is
the entirety of Dijkstra's Algorithm.

366
00:20:12.180 --> 00:20:16.290
I've explained all of the ingredients
about how it works at a conceptual level.

367
00:20:16.290 --> 00:20:18.750
The two things I argue is,
why is it correct?

368
00:20:18.750 --> 00:20:21.640
Why does it actually compute shortest
paths directly to all of the different

369
00:20:21.640 --> 00:20:24.900
vertices, and then secondly,
how fast can we implement it?

370
00:20:24.900 --> 00:20:27.710
The next two videos are going to
answer both of those questions but

371
00:20:27.710 --> 00:20:30.750
before we do that, let's go through
an example to get a better feel for

372
00:20:30.750 --> 00:20:32.650
how this algorithm actually works.

373
00:20:32.650 --> 00:20:34.690
I also want to go through a non example so

374
00:20:34.690 --> 00:20:38.200
that you can appreciate how it breaks
down when there are negative edges, and

375
00:20:38.200 --> 00:20:41.570
that'll make it clear why do we need
a proof of correctness because it's not

376
00:20:41.570 --> 00:20:43.970
correct without any assumptions
about the edge lengths.