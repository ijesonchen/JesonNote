WEBVTT

1
00:00:00.870 --> 00:00:03.350
Let me begin by telling you
what a topological ordering of

2
00:00:03.350 --> 00:00:04.150
a directed graph is.

3
00:00:06.200 --> 00:00:09.740
Essentially, it's an ordering of
the vertices of a graph so that all of

4
00:00:09.740 --> 00:00:14.750
the arcs, the directed edges of the graph,
only go forward in the ordering.

5
00:00:14.750 --> 00:00:17.660
So let me encode an ordering
by a labeling of

6
00:00:17.660 --> 00:00:20.068
the vertices with
the numbers one through n.

7
00:00:20.068 --> 00:00:23.249
This is just to encode the position
of each vertex in this ordering.

8
00:00:24.390 --> 00:00:27.707
So formally there's going to be
a function which takes vertices of G and

9
00:00:27.707 --> 00:00:30.110
maps them to integers between 1 and n.

10
00:00:30.110 --> 00:00:33.710
Each of the numbers 1 through n should
be taken on by exactly one vertex.

11
00:00:33.710 --> 00:00:35.510
Here n is the number of vertices of G.

12
00:00:36.750 --> 00:00:38.480
So that's just a way to
encode an ordering, and

13
00:00:38.480 --> 00:00:41.040
then here's really
the important property that

14
00:00:41.040 --> 00:00:44.440
every directed edge of G goes
forward in the ordering.

15
00:00:44.440 --> 00:00:49.840
That is if u v is directed
edge of the directed graph G,

16
00:00:49.840 --> 00:00:57.767
then it should be that the f value of the
tail is less than the f value of the head.

17
00:00:57.767 --> 00:01:01.605
That is this directed edge has
the higher f value as traverse

18
00:01:01.605 --> 00:01:03.382
in the correct direction.

19
00:01:03.382 --> 00:01:06.290
Let me give you an example
just to make this more clear.

20
00:01:06.290 --> 00:01:10.410
So suppose we have this very simple
directed graph, with four vertices.

21
00:01:10.410 --> 00:01:12.810
Let me show you two different,

22
00:01:12.810 --> 00:01:16.150
totally legitimate topological
orderings of this graph.

23
00:01:16.150 --> 00:01:20.046
So the first thing you could do,

24
00:01:20.046 --> 00:01:25.249
is you could label s1, v2, w3 and t4.

25
00:01:25.249 --> 00:01:28.629
Another option would be to
label them the same way,

26
00:01:28.629 --> 00:01:31.540
except you can swap the labels of v and w.

27
00:01:31.540 --> 00:01:34.378
So if you want, you can label v 3 and w 2.

28
00:01:34.378 --> 00:01:35.107
So again,

29
00:01:35.107 --> 00:01:40.850
what these labelings are really meant to
encode is an ordering of the vertices.

30
00:01:40.850 --> 00:01:45.999
So the blue labeling,
you can think of as encoding

31
00:01:45.999 --> 00:01:52.014
the ordering in which we put s
first then v then w and then t.

32
00:01:52.014 --> 00:01:56.690
Whereas the green labeling can be
thought of as the same ordering of

33
00:01:56.690 --> 00:01:59.538
the nodes except with w coming before v.

34
00:01:59.538 --> 00:02:02.724
What's important is that the pattern
of the edge is exactly the same in both

35
00:02:02.724 --> 00:02:06.490
cases, and in particular all of
the edges go forward in this ordering.

36
00:02:06.490 --> 00:02:10.310
So in either case we have s with
edges from s to v, and s to w.

37
00:02:11.420 --> 00:02:15.828
So that looks the same way pictorially,
whichever order v or w are in, and

38
00:02:15.828 --> 00:02:18.970
then symmetrically there
are edges from v and w to t.

39
00:02:18.970 --> 00:02:22.768
So you'll notice that no matter
which order that we put v and w in,

40
00:02:22.768 --> 00:02:26.372
all four of these edges go forward
in each of these orderings.

41
00:02:26.372 --> 00:02:31.210
Now if you try to put v before s
it wouldn't work because the edge

42
00:02:31.210 --> 00:02:35.580
from s to v would be going
backward if v preceded s.

43
00:02:35.580 --> 00:02:38.580
Similarly, if you put t anywhere
other than the final position,

44
00:02:38.580 --> 00:02:40.650
you would not have a topological ordering.

45
00:02:40.650 --> 00:02:41.150
So in fact,

46
00:02:41.150 --> 00:02:44.600
these are the only two topological
orderings of this directed graph.

47
00:02:44.600 --> 00:02:47.600
I encourage you to
convince yourself of that.

48
00:02:47.600 --> 00:02:49.990
Now, who cares about
topological orderings?

49
00:02:49.990 --> 00:02:52.830
Well, this is actually
a very useful subroutine.

50
00:02:52.830 --> 00:02:55.600
This has been come up in
all kinds of applications.

51
00:02:55.600 --> 00:02:59.140
Really, whenever you want to sequence
a bunch of tasks when there's precedent

52
00:02:59.140 --> 00:03:00.500
constraints among them.

53
00:03:00.500 --> 00:03:04.420
By precedence constraint I mean one
task has to be finished before another.

54
00:03:04.420 --> 00:03:07.770
You can think, for example, about
the courses in some kind of undergraduate

55
00:03:07.770 --> 00:03:09.790
major like a computer science major.

56
00:03:09.790 --> 00:03:12.710
Here the vertices are going to
correspond to all of the course and

57
00:03:12.710 --> 00:03:17.080
there's a directed edge from course A to
course B if course A is a prerequisite for

58
00:03:17.080 --> 00:03:19.030
course B, if you have to take it first.

59
00:03:19.030 --> 00:03:21.830
So then of course, you'd like to know
a sequence in which you can take these

60
00:03:21.830 --> 00:03:26.480
courses so that you always take a course
after you've taken its pre-requisite.

61
00:03:26.480 --> 00:03:30.270
And that's exactly what a topological
ordering will accomplish.

62
00:03:30.270 --> 00:03:33.790
So it's reasonable to ask the question
when does a directed graph

63
00:03:33.790 --> 00:03:38.310
have a topological ordering and
when a graph does have such an ordering,

64
00:03:38.310 --> 00:03:40.740
how do we get our grubby
little hands on it?

65
00:03:40.740 --> 00:03:43.720
Well there's a very clear
necessary condition for

66
00:03:43.720 --> 00:03:49.515
a graph to have a topological ordering,
which is it had better be a cyclic.

67
00:03:49.515 --> 00:03:53.740
Put differently,
if a directed graph has a directed cycle

68
00:03:53.740 --> 00:03:56.770
then there is certainly no way there
is going to be a topological ordering.

69
00:03:57.780 --> 00:04:00.540
So I hope the reason for
this is fairly clear.

70
00:04:00.540 --> 00:04:03.830
Consider any directed graph which
does have a directed cycle and

71
00:04:03.830 --> 00:04:07.450
consider any purported way
of ordering the vertices.

72
00:04:07.450 --> 00:04:11.450
Well, now just traverse the edges
of the cycle, one by one.

73
00:04:11.450 --> 00:04:15.960
So you start somewhere of the cycle, and
if the first edge goes backward, well,

74
00:04:15.960 --> 00:04:16.960
you're already screwed.

75
00:04:16.960 --> 00:04:19.170
You already know that this
ordering is not topological.

76
00:04:19.170 --> 00:04:20.450
No edges can go backward.

77
00:04:20.450 --> 00:04:23.730
So evidently, the first edge of
this cycle has to go forward.

78
00:04:23.730 --> 00:04:26.940
But now, you have to traverse the rest
of the edges on this cycle, and

79
00:04:26.940 --> 00:04:28.930
eventually you come back
to where you started.

80
00:04:28.930 --> 00:04:32.060
So if you started out by going forward,
at some point you have to go backward.

81
00:04:32.060 --> 00:04:33.790
So that edge goes
backward in the ordering,

82
00:04:33.790 --> 00:04:36.210
violating the property of
the topological ordering.

83
00:04:36.210 --> 00:04:37.520
That's true for every ordering, so

84
00:04:37.520 --> 00:04:41.169
directed cycles exclude the possibility
of topological ordering.

85
00:04:42.280 --> 00:04:44.730
Now the question is what
if you don't have a cycle?

86
00:04:44.730 --> 00:04:47.920
Is that a strong enough condition
that you're guaranteed to

87
00:04:47.920 --> 00:04:49.440
have a topological ordering?

88
00:04:49.440 --> 00:04:54.230
Is the only obstruction to
sequencing jobs without conflicts

89
00:04:54.230 --> 00:04:58.040
the obvious one of having
circular precedence constraints?

90
00:04:58.040 --> 00:05:00.980
So it turns out not only is
the answer yes, as long as

91
00:05:00.980 --> 00:05:04.160
you don't have any directed cycles,
you're guaranteed a topological ordering.

92
00:05:04.160 --> 00:05:09.370
But we can even compute on in linear
time no less via depth-first search.

93
00:05:10.650 --> 00:05:14.964
So before I show you the super slick and
super efficient reduction of computing

94
00:05:14.964 --> 00:05:17.721
topological orderings
of depth-first search.

95
00:05:17.721 --> 00:05:19.650
Let me first show over a pretty good but

96
00:05:19.650 --> 00:05:23.631
slightly less slick and slightly less
efficient solution to help build up your

97
00:05:23.631 --> 00:05:27.571
intuition about directed acyclic graphs
and their topological orderings.

98
00:05:27.571 --> 00:05:32.530
So for the straightforward solution, we're
going to begin with a simple observation.

99
00:05:33.738 --> 00:05:37.980
Every directed acyclic graph has what
I'm going to call a sink vertex.

100
00:05:37.980 --> 00:05:40.380
That is a vertex without
any outgoing arcs.

101
00:05:41.400 --> 00:05:45.850
So in the forenode, directed acyclic
graph we were exploring on the last slide

102
00:05:45.850 --> 00:05:52.980
there's exactly one source of sink vertex,
and that's this right-most vertex here.

103
00:05:52.980 --> 00:05:54.690
That has no outgoing arcs,

104
00:05:54.690 --> 00:05:57.090
the other three vertices all
have at least one outgoing arc.

105
00:05:58.120 --> 00:06:05.630
Now why is it the case that a directed
acyclic graph has to have a sink vertex?

106
00:06:05.630 --> 00:06:08.300
Well, suppose it didn't,
suppose it had no sink vertex.

107
00:06:08.300 --> 00:06:11.980
That would mean every single vertex
has at least one outgoing arc.

108
00:06:11.980 --> 00:06:14.580
So what could we do if every
vertex has one outgoing arc?

109
00:06:14.580 --> 00:06:16.080
Well, we can start in an arbitrary node.

110
00:06:16.080 --> 00:06:19.490
We know it's not a sink vertex,
because we're assuming there aren't any.

111
00:06:19.490 --> 00:06:21.090
So there's an outgoing arc,
so let's follow it.

112
00:06:22.330 --> 00:06:23.050
We get to some other node.

113
00:06:24.180 --> 00:06:26.935
By assumption there's no sink vertex,
so this isn't a sink vertex, so

114
00:06:26.935 --> 00:06:29.310
there's an outgoing arc,
so let's follow it.

115
00:06:29.310 --> 00:06:31.050
We get to some other node.

116
00:06:31.050 --> 00:06:35.350
That also has an outgoing arc,
let's follow that, and so on.

117
00:06:35.350 --> 00:06:40.090
So we just keep following outgoing arcs,
and we do this as long as we want

118
00:06:40.090 --> 00:06:42.450
because every vertex has
at least one outgoing arc.

119
00:06:42.450 --> 00:06:46.070
Well there's a finite number of vertices,
right this graph has say N vertices.

120
00:06:46.070 --> 00:06:50.500
So if we follow N arcs,
we are going to see N+1 vertices.

121
00:06:50.500 --> 00:06:53.960
So by the pigeon-hole principle,
we're going to have to see a repeat.

122
00:06:53.960 --> 00:06:56.510
Right so, if N+1 vertices,
is only N distinct vertices,

123
00:06:56.510 --> 00:06:59.300
we're going to see some vertex twice.

124
00:06:59.300 --> 00:07:04.690
So for example, maybe after I take
the outgoing arc from this vertex,

125
00:07:04.690 --> 00:07:07.780
I get back to this one
that I saw previously.

126
00:07:07.780 --> 00:07:09.340
Well, what have we done?

127
00:07:09.340 --> 00:07:11.770
What happens when we
get a repeated vertex?

128
00:07:11.770 --> 00:07:15.976
By tracing these outgoing arcs and
repeating a vertex,

129
00:07:15.976 --> 00:07:18.758
we have exhibited a directed cycle.

130
00:07:18.758 --> 00:07:20.651
And that's exactly what we're
assuming doesn't exist.

131
00:07:20.651 --> 00:07:22.970
We're talking about
directed acyclic graphs.

132
00:07:22.970 --> 00:07:23.860
So, put differently,

133
00:07:23.860 --> 00:07:28.340
we just prove that a vertex with no sink
vertex has to have a directed cycle.

134
00:07:28.340 --> 00:07:32.270
So a directed acyclic graph therefore
has to have at least one sink vertex.

135
00:07:34.060 --> 00:07:38.030
So here's how we use this one very simple
observation now to compute a topological

136
00:07:38.030 --> 00:07:39.570
ordering of a directed acyclic graph.

137
00:07:41.160 --> 00:07:43.180
Well let's do a little thought experiment.

138
00:07:43.180 --> 00:07:46.590
Suppose in fact this graph
did have a topological order.

139
00:07:47.930 --> 00:07:53.656
Let's think about the vertex which goes
last in this topological ordering.

140
00:07:53.656 --> 00:07:57.098
Remember, any arc which goes backward
in the ordering is a violation.

141
00:07:57.098 --> 00:07:58.736
So we have to avoid that.

142
00:07:58.736 --> 00:08:01.696
We have to make sure every arc
goes forward in the ordering.

143
00:08:01.696 --> 00:08:04.861
Now any vertex which has an outgoing arc,

144
00:08:04.861 --> 00:08:09.960
we better put somewhere other than
in the final position, right?

145
00:08:09.960 --> 00:08:13.572
So the node that we put in the final
position, all of its outgoing arcs

146
00:08:13.572 --> 00:08:16.890
are going to wind up going backward
in the topological ordering.

147
00:08:16.890 --> 00:08:20.200
There's no where else they can go,
this vertex is last.

148
00:08:20.200 --> 00:08:22.997
So in other words,
if we plan to successfully compute

149
00:08:22.997 --> 00:08:27.030
a topological ordering,
the only candidate vertices for

150
00:08:27.030 --> 00:08:30.810
that final position in the ordering
are the sink vertices.

151
00:08:30.810 --> 00:08:31.630
That's all that's going to work.

152
00:08:31.630 --> 00:08:34.640
We put a non-sink vertex there,
we're toast, it's not going to happen.

153
00:08:35.720 --> 00:08:38.609
Fortunately, if it's directed acyclic,
we know there is a sink vertex.

154
00:08:39.680 --> 00:08:42.440
So let v be a sink vertex of g,

155
00:08:42.440 --> 00:08:45.154
if there's many sink vertices,
we pick one arbitrarily.

156
00:08:45.154 --> 00:08:50.190
We set v's label to be
the maximum possible, so

157
00:08:50.190 --> 00:08:53.340
if there's n vertices we're going to
put that in the nth position.

158
00:08:53.340 --> 00:08:59.370
And now we just recurse on the rest of
the graph, which has only n-1 vertices.

159
00:08:59.370 --> 00:09:02.960
So how would this work in
the example on the right?

160
00:09:02.960 --> 00:09:07.040
Well in the first iteration, or
the first outermost recursive call,

161
00:09:07.040 --> 00:09:10.920
the only sink vertex is this
right most one, circled in green.

162
00:09:10.920 --> 00:09:15.500
So there's four vertices, so
we're going to give that the label 4.

163
00:09:15.500 --> 00:09:17.310
So, then having labeled that 4,

164
00:09:17.310 --> 00:09:20.450
we delete that vertex and
all the edges incident to it.

165
00:09:20.450 --> 00:09:23.104
And we recurse on what's
left of the graph, so

166
00:09:23.104 --> 00:09:27.480
that would be the left-most three
vertices plus the left-most two edges.

167
00:09:27.480 --> 00:09:31.741
Now, this graph has two sink vertices,
after we've deleted 4 and

168
00:09:31.741 --> 00:09:33.098
everything from it.

169
00:09:33.098 --> 00:09:39.730
So both this top vertex and this bottom
vertex are sinks in the residual graph.

170
00:09:39.730 --> 00:09:45.030
So now in the next recursive call, we can
choose either of those as our sink vertex.

171
00:09:45.030 --> 00:09:47.527
Because we have two choices,
that generates two topological orderings.

172
00:09:47.527 --> 00:09:50.996
Those are exactly the ones
that we saw in the example.

173
00:09:50.996 --> 00:09:53.100
But if, for example,

174
00:09:53.100 --> 00:09:57.670
we choose this one to be our sink vertex,
then that gets the label 3.

175
00:09:57.670 --> 00:10:02.730
Then we recurse just on
the northwestern most two edges.

176
00:10:02.730 --> 00:10:05.610
This vertex is the unique sink in
that graph, that gets the label 2.

177
00:10:05.610 --> 00:10:09.450
And then it recurs on the one node that
we graph, and that gets the label 1.

178
00:10:09.450 --> 00:10:11.570
So, why is this algorithm work?

179
00:10:11.570 --> 00:10:14.480
Well, there's just two
quick observations we need.

180
00:10:14.480 --> 00:10:18.500
So, first of all, we need to argue that
it makes sense that in every iteration or

181
00:10:18.500 --> 00:10:21.620
in every recursive call,
we can indeed find the sink vertex,

182
00:10:21.620 --> 00:10:24.920
that we can assign in the final
position that's still unfilled.

183
00:10:24.920 --> 00:10:28.930
And the reason for that is just if
you take a directed acyclic graph and

184
00:10:28.930 --> 00:10:30.610
you delete one or more vertices from it,

185
00:10:30.610 --> 00:10:32.700
you're still going to have
a directed acyclic graph, right?

186
00:10:32.700 --> 00:10:35.240
You can't create cycles by
just getting rid of stuff.

187
00:10:35.240 --> 00:10:37.900
You can only destroy cycles,
and we started with no cycles.

188
00:10:37.900 --> 00:10:40.920
So through all the intermediate
recursive calls we have no cycles by

189
00:10:40.920 --> 00:10:42.550
our first observation is always the sink.

190
00:10:43.660 --> 00:10:46.175
So the second that that we have to
argue is that we really do produce

191
00:10:46.175 --> 00:10:47.300
a topological ordering.

192
00:10:47.300 --> 00:10:50.043
So remember what that means,
that means for every edge of the graph,

193
00:10:50.043 --> 00:10:51.460
it goes forward in the ordering.

194
00:10:51.460 --> 00:10:55.310
That is the head of the arc is given
a position later than the tail of the arc.

195
00:10:56.360 --> 00:11:00.200
And this simply follows because
we always use sink vertices.

196
00:11:00.200 --> 00:11:03.978
So consider the vertex v which
is assigned to the position i.

197
00:11:03.978 --> 00:11:07.743
This means then, that when we're down to a
graph that only has i vertices remaining,

198
00:11:07.743 --> 00:11:09.490
v is the sink vertex.

199
00:11:09.490 --> 00:11:13.395
If v is the sink vertex when only
the first i vertices remain,

200
00:11:13.395 --> 00:11:17.120
what property does it have
in the original graph?

201
00:11:17.120 --> 00:11:20.050
Well, it means all of outgoing
arcs that it has have

202
00:11:20.050 --> 00:11:24.470
to go to vertices that were already
deleted and assigned higher positions.

203
00:11:24.470 --> 00:11:28.040
So for every vertex, by the time it
actually gets assigned a position,

204
00:11:28.040 --> 00:11:33.170
it's a sink and it only has incoming
arcs from the as yet unsigned vertices.

205
00:11:33.170 --> 00:11:37.401
It's outgoing arcs all go forward to
vertices that were already assigned higher

206
00:11:37.401 --> 00:11:40.400
positions, and
got deleted previously from the graph.

207
00:11:42.350 --> 00:11:45.110
So now we have under our belt
a pretty reasonable solution for

208
00:11:45.110 --> 00:11:48.180
computing a topological ordering
of a directed acyclic graph.

209
00:11:48.180 --> 00:11:51.560
In particular, remember we observed that
if a graph does have a directed cycle,

210
00:11:51.560 --> 00:11:53.640
then of course there's no way
there's a topological ordering.

211
00:11:54.820 --> 00:11:57.120
However, you order the vertices summage
of the side that's going to have to go

212
00:11:57.120 --> 00:11:58.030
backward.

213
00:11:58.030 --> 00:12:00.930
And the solution on the previous slide
shows that, as long as you don't have

214
00:12:00.930 --> 00:12:04.790
a cycle, it guarantees the topological
ordering does indeed exist.

215
00:12:04.790 --> 00:12:06.330
And in fact, it's a constructive proof,

216
00:12:06.330 --> 00:12:08.766
constructive argument,
that gives an algorithm.

217
00:12:08.766 --> 00:12:13.080
What you do is you would keep plucking off
sinks, sink vertices one at a time, and

218
00:12:13.080 --> 00:12:17.840
populating the ordering from right to
left, as you keep peeling off these sinks.

219
00:12:19.060 --> 00:12:21.253
So that's a pretty good algorithm,
it's not too slow,

220
00:12:21.253 --> 00:12:24.908
and actually if you implement it just so,
you can even get it to run in linear time.

221
00:12:24.908 --> 00:12:28.350
But I want to conclude this video with
an application of depth first search,

222
00:12:28.350 --> 00:12:31.470
which is a very slick,
very efficient computation

223
00:12:31.470 --> 00:12:34.040
of a topological ordering of
a directed acyclic graph.

224
00:12:35.260 --> 00:12:38.670
So, we're just going to make two really
quite minor modifications to our previous

225
00:12:38.670 --> 00:12:41.130
depth first search subroutine.

226
00:12:41.130 --> 00:12:43.246
The first thing is we have
to embed it in a for loop,

227
00:12:43.246 --> 00:12:46.150
just like we did with breadth first search
when we were computing the connected

228
00:12:46.150 --> 00:12:47.900
components of an undirected graph.

229
00:12:47.900 --> 00:12:50.700
That's because, in completing a
topological ordering, we better give every

230
00:12:50.700 --> 00:12:53.410
single vertex a label, we'd better
look at every vertex at least once.

231
00:12:53.410 --> 00:12:57.460
So to do that, we'll just make sure
there's an outer for loop and then if we

232
00:12:57.460 --> 00:13:01.640
have multiple components, we'll just make
sure to invoke DFS as often as we need to.

233
00:13:01.640 --> 00:13:03.930
The second thing we'll do is we'll
add a little bit of bookkeeping, and

234
00:13:03.930 --> 00:13:06.460
this will make sure that
every node gets a label.

235
00:13:06.460 --> 00:13:08.949
And in fact, these labels will
define a topological order.

236
00:13:11.010 --> 00:13:13.520
So let's not forget the code for
depth first search.

237
00:13:13.520 --> 00:13:16.730
This is where you're given a graph, G, in
this case we're interested in a directed

238
00:13:16.730 --> 00:13:19.577
acyclic graph, and
you're given a start vertex, S.

239
00:13:20.650 --> 00:13:23.730
And what you do is, as soon as you get to
S you very aggressively start trying to

240
00:13:23.730 --> 00:13:24.780
explore its neighbors.

241
00:13:26.080 --> 00:13:28.120
Of course, you don't visit any
vertex you've already been to.

242
00:13:29.650 --> 00:13:30.960
You keep track of who you visited.

243
00:13:32.780 --> 00:13:34.850
And if you find any vertex
that you haven't seen before,

244
00:13:34.850 --> 00:13:38.100
you immediately start
recursing on that node.

245
00:13:38.100 --> 00:13:41.842
So I said the first modification we
need is to embed this into an outer for

246
00:13:41.842 --> 00:13:44.680
loop to ensure that every
single node gets labeled.

247
00:13:44.680 --> 00:13:48.530
So I'm going to call
that subroutine DFS-Loop.

248
00:13:48.530 --> 00:13:50.440
It does not take a start vertex.

249
00:13:50.440 --> 00:13:53.830
Initialization, all nodes start
out on an explorative course.

250
00:13:53.830 --> 00:13:56.410
And we're also going to keep
track of a global variable,

251
00:13:56.410 --> 00:13:57.630
which I'll call current_label.

252
00:13:57.630 --> 00:13:59.910
This is going to be initialized to n,

253
00:13:59.910 --> 00:14:04.020
and we're going to count down each
time we finish exploring a new node.

254
00:14:04.020 --> 00:14:05.960
And these will be precisely the f values.

255
00:14:05.960 --> 00:14:08.940
These will be exactly
the positions of the vertices

256
00:14:08.940 --> 00:14:11.790
in the topological
ordering that we output.

257
00:14:11.790 --> 00:14:15.300
In the main loop we're going to iterate
over all of the nodes of the graph.

258
00:14:15.300 --> 00:14:18.290
So for example,
we just do a scan through the node array.

259
00:14:18.290 --> 00:14:22.410
As usual, we don't want to do any work
twice, so if a vertex has already

260
00:14:22.410 --> 00:14:27.490
been explored in some previous invocation
of DFS, we don't search from it.

261
00:14:27.490 --> 00:14:30.530
This should all be familiar from our
embedding of breadth first search in a for

262
00:14:30.530 --> 00:14:33.890
loop when we computed the connected
components of an undirected graph.

263
00:14:33.890 --> 00:14:36.910
And if we get to a vertex v of the graph,
that we haven't explored yet,

264
00:14:36.910 --> 00:14:43.200
then we just invoke DFS in the graph,
with that vertex as the starting point.

265
00:14:43.200 --> 00:14:46.465
So, the final thing I need to add is I
need to tell you what the f values are,

266
00:14:46.465 --> 00:14:49.520
what the actual assignments
of vertices to positions are.

267
00:14:49.520 --> 00:14:53.270
And as I foreshadowed, we're going to
use this global current_label variable.

268
00:14:53.270 --> 00:14:57.970
And that'll have us assign vertices
to positions from right to the left.

269
00:14:57.970 --> 00:15:01.080
Very much mimicking what was going
on in our recursive solution,

270
00:15:01.080 --> 00:15:04.160
where we plucked off sink
vertices one at a time.

271
00:15:04.160 --> 00:15:06.810
So, when's the right time to
assign a vertex its position?

272
00:15:06.810 --> 00:15:07.330
Well, it turns out,

273
00:15:07.330 --> 00:15:11.410
the right time is when we've
completely finished with that vertex.

274
00:15:11.410 --> 00:15:14.510
So we're about to pop
the recursive call from the stack

275
00:15:14.510 --> 00:15:16.040
corresponding to that vertex.

276
00:15:17.290 --> 00:15:18.750
So, after we've gone through the for

277
00:15:18.750 --> 00:15:23.860
loop of all the edges outgoing
from a given vertex, we set

278
00:15:23.860 --> 00:15:29.484
f (s) = to whatever the current_label is
and then we decrement the current_label.

279
00:15:30.590 --> 00:15:32.680
And that's it,
that is the entire algorithm.

280
00:15:32.680 --> 00:15:35.950
So, the claim is going to be
that the f values produced,

281
00:15:35.950 --> 00:15:39.440
which you'll notice are going to be
the integers between n through 1,

282
00:15:39.440 --> 00:15:43.080
because DFS will be called
eventually once on every vertex, and

283
00:15:43.080 --> 00:15:45.440
it will get some integer
assignment at the end.

284
00:15:45.440 --> 00:15:48.880
And everybody is going to get a distinct
value, and the largest one is n and

285
00:15:48.880 --> 00:15:50.270
the smallest one is 1.

286
00:15:50.270 --> 00:15:52.490
The claim is that is
a topological ordering.

287
00:15:52.490 --> 00:15:56.387
Clearly this algorithm is just
as blazingly fast as DFS itself,

288
00:15:56.387 --> 00:15:59.429
with just a trivial amount
of extra bookkeeping.

289
00:15:59.429 --> 00:16:01.488
Lets see how it works
on our running example.

290
00:16:01.488 --> 00:16:04.999
So lets just say we have this four
node directed graph that we're getting

291
00:16:04.999 --> 00:16:05.758
quite used to.

292
00:16:05.758 --> 00:16:07.414
So this has four vertices, so

293
00:16:07.414 --> 00:16:10.770
we initialize the current label
variable to be equal to 4.

294
00:16:10.770 --> 00:16:12.730
So let's say that in the outer DFS loop,

295
00:16:12.730 --> 00:16:15.240
let's say we start somewhere
like the vertex v.

296
00:16:15.240 --> 00:16:16.290
So notice in this outer for

297
00:16:16.290 --> 00:16:20.180
loop, we wind up considering the vertices
in a totally arbitrary order.

298
00:16:20.180 --> 00:16:24.400
So let's say we first call
DFS from this vertex v.

299
00:16:24.400 --> 00:16:28.840
So what happens, well, the only place you
can go from v is to t, and then at t,

300
00:16:28.840 --> 00:16:29.950
there's nowhere to go.

301
00:16:29.950 --> 00:16:34.920
So we recursively call DFS at t, there's
no edges to go through, we finish the for

302
00:16:34.920 --> 00:16:39.457
loop, and so t is going to be assigned
an f value equal to the current label,

303
00:16:39.457 --> 00:16:43.368
which is n, and here,
n is the number of vertices, which is 4.

304
00:16:43.368 --> 00:16:48.660
So f(t) is going to get, so our t is
going to get the assignment, the label 4.

305
00:16:48.660 --> 00:16:52.545
So then now we're done with t,
we backtrack back to v.

306
00:16:52.545 --> 00:16:56.586
We decrement the current label as we
finish up with t, we get to v, and

307
00:16:56.586 --> 00:17:00.870
now there's no more outgoing arcs
to explore, so for loops finish.

308
00:17:00.870 --> 00:17:02.900
So we're done with it
in depth-first search.

309
00:17:02.900 --> 00:17:08.680
So it gets what's the new current label,
which is now 3, and again,

310
00:17:08.680 --> 00:17:14.520
having finished with v, we decrement
the current label, which is now down to 2.

311
00:17:14.520 --> 00:17:16.862
So now we go back to the outer for loop,

312
00:17:16.862 --> 00:17:19.948
maybe the next vertex we
consider is the vertex t.

313
00:17:19.948 --> 00:17:23.166
But we've already been there,
so we don't bother to DFS on t.

314
00:17:23.166 --> 00:17:26.110
And then maybe after that, we try it on s.

315
00:17:26.110 --> 00:17:29.170
So maybe s is the third vertex
that the for loop considers.

316
00:17:29.170 --> 00:17:33.510
We haven't seen s yet, so we invoke DFS,
starting from the vertex s.

317
00:17:33.510 --> 00:17:37.669
From s, there's two arcs to explore,
the one with v, v we've already seen, so

318
00:17:37.669 --> 00:17:39.826
nothing's going to happen with the arc sv.

319
00:17:39.826 --> 00:17:45.190
But on the other hand, the arc sW will
cause us to recursively call DFS on w.

320
00:17:45.190 --> 00:17:49.050
From w, we try to look at the arc from
w to t, but we've already been to t, so

321
00:17:49.050 --> 00:17:50.190
we don't do anything.

322
00:17:50.190 --> 00:17:55.383
That finishes up with w, so depth-first
search then finishes up at the vertex w,

323
00:17:55.383 --> 00:17:58.181
w gets the assignment
of the current label.

324
00:17:58.181 --> 00:18:01.090
So f(w) = 2.

325
00:18:01.090 --> 00:18:04.440
We decrement current label,
now its value is 1.

326
00:18:04.440 --> 00:18:07.700
Now we backtrack to s, so we've already
considered all of s's outgoing arcs, so

327
00:18:07.700 --> 00:18:08.492
we're done with s.

328
00:18:08.492 --> 00:18:12.490
It gets the current label, which is 1.

329
00:18:12.490 --> 00:18:17.150
And this is indeed one of the two
topological orderings of this graph

330
00:18:17.150 --> 00:18:20.238
that we exhibited a couple slides ago.

331
00:18:20.238 --> 00:18:22.090
So that's the full description
of the algorithm and

332
00:18:22.090 --> 00:18:24.200
how it works in a concrete example.

333
00:18:24.200 --> 00:18:27.347
Let's just discuss what are its key
properties, its running time and

334
00:18:27.347 --> 00:18:28.770
its correctness.

335
00:18:28.770 --> 00:18:33.570
So, as far as the running time of this
algorithm the running time is linear.

336
00:18:33.570 --> 00:18:35.240
It's exactly what you'd want it to be.

337
00:18:35.240 --> 00:18:37.350
And the reason the running
time is linear is for

338
00:18:37.350 --> 00:18:41.774
the usual reasons that these search
algorithms run in linear time.

339
00:18:41.774 --> 00:18:44.914
You're explicitly keeping track
of which nodes you've been to so

340
00:18:44.914 --> 00:18:48.499
that you don't visit them twice, so
you only do a constant amount of work for

341
00:18:48.499 --> 00:18:49.466
each of the n nodes.

342
00:18:49.466 --> 00:18:52.616
And each edge, in a directed graph,
you actually only look at each edge once,

343
00:18:52.616 --> 00:18:54.730
when you visit the tail of that edge.

344
00:18:54.730 --> 00:18:57.950
So you only do a constant amount
of work per edge as well.

345
00:18:57.950 --> 00:19:00.625
Of course,
the other key property is correctness.

346
00:19:00.625 --> 00:19:04.470
That is, we need to show that you are
guaranteed to get a topological ordering.

347
00:19:04.470 --> 00:19:05.250
So what does that mean?

348
00:19:05.250 --> 00:19:10.066
That means every arc travels
forward in the ordering.

349
00:19:10.066 --> 00:19:15.445
So if (u,v) is an edge,
then f(u), the label assigned

350
00:19:15.445 --> 00:19:21.700
to u in this algorithm is less
than the label assigned to v.

351
00:19:21.700 --> 00:19:24.600
The proof of correctness
splits into two cases,

352
00:19:24.600 --> 00:19:30.510
depending on which of the vertices u or
v is visited first by depth-first search.

353
00:19:30.510 --> 00:19:33.675
Because of our for loop, which iterates
over all of the vertices of the graph g,

354
00:19:33.675 --> 00:19:38.210
depth-first search is going to be invoked
exactly once from each of the vertices.

355
00:19:38.210 --> 00:19:41.690
Either u or v could be first,
both are possible.

356
00:19:41.690 --> 00:19:47.220
So first let's assume that u was visited
by DFS before v, so then what happens?

357
00:19:47.220 --> 00:19:50.150
Well, remember what depth first search
does, when you invoke it from a node,

358
00:19:50.150 --> 00:19:52.930
it's going to find everything
findable from that node.

359
00:19:52.930 --> 00:19:56.870
So if u is visited before v,
that means v isn't getting explored, so

360
00:19:56.870 --> 00:19:59.385
it's a candidate for being discovered.

361
00:19:59.385 --> 00:20:01.690
Moreover, there's a an arc
straight from u to v, so

362
00:20:01.690 --> 00:20:05.660
certainly DFS invoked at
u is going to discover v.

363
00:20:05.660 --> 00:20:10.191
Furthermore, the recursive call
corresponding to the node v is going to

364
00:20:10.191 --> 00:20:14.662
finish, it's going to get popped off
the program stack before that of u.

365
00:20:14.662 --> 00:20:17.562
The easiest way to see this is just to
think about the recursive structure of

366
00:20:17.562 --> 00:20:18.491
depth-first search.

367
00:20:18.491 --> 00:20:22.817
So when you call depth-first search from
u, that recursive call, that's going to

368
00:20:22.817 --> 00:20:27.018
make further recursive calls to all of
the relevant neighbors including v, and

369
00:20:27.018 --> 00:20:31.075
u's call is not going to get popped off
the stack until v's does beforehand.

370
00:20:31.075 --> 00:20:34.845
That's because of the last in,
first out nature of a stack or

371
00:20:34.845 --> 00:20:35.689
of a recursive algorithm.

372
00:20:37.840 --> 00:20:41.330
So because v's recursive call
finishes before that of u,

373
00:20:41.330 --> 00:20:44.270
that means it will be assigned
a larger label than u.

374
00:20:44.270 --> 00:20:46.960
Remember, the labels keep
decreasing as more and

375
00:20:46.960 --> 00:20:49.330
more recursive calls get
popped off the stack.

376
00:20:49.330 --> 00:20:51.240
So that's exactly what we wanted.

377
00:20:51.240 --> 00:20:53.490
Now, what's up in the second case,
case two?

378
00:20:54.600 --> 00:20:57.846
So this is where v is visited before u.

379
00:20:57.846 --> 00:21:01.350
And here's where we use the fact
that the graph has no cycles.

380
00:21:01.350 --> 00:21:03.730
So there's a direct arc from u to v.

381
00:21:03.730 --> 00:21:08.070
That means there cannot be any directed
path from v all the way back to u.

382
00:21:08.070 --> 00:21:09.549
That would create a directed cycle.

383
00:21:10.910 --> 00:21:14.980
Therefore, DFS invoked from v
is not going to discover u.

384
00:21:14.980 --> 00:21:17.500
There's no directed path from v to u,
again, if there was,

385
00:21:17.500 --> 00:21:18.900
there'd be a directed cycle.

386
00:21:18.900 --> 00:21:20.950
So it doesn't find u at all.

387
00:21:20.950 --> 00:21:25.890
So the recursive call of v again
is going to get popped before

388
00:21:25.890 --> 00:21:27.640
u's is even pushed onto the stack.

389
00:21:27.640 --> 00:21:31.270
So we're totally done with v before
we even start to consider u.

390
00:21:31.270 --> 00:21:35.070
So therefore, for the same reasons,
since v's recursive call finishes first,

391
00:21:35.070 --> 00:21:39.450
its label is going to be larger,
which is exactly what we wanted to prove.

392
00:21:39.450 --> 00:21:42.143
So that concludes the first
quite interesting application of

393
00:21:42.143 --> 00:21:43.186
depth-first search.

394
00:21:43.186 --> 00:21:46.520
In the next video, we'll look at an even
more interesting one which computes

395
00:21:46.520 --> 00:21:49.360
the strongly connected
components of a directed graph.

396
00:21:49.360 --> 00:21:52.710
This time, we can't do it in one
depth-first search, we'll need two.