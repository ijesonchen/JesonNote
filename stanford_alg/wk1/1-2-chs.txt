0:01
在你还是个三年级小孩的时候 你学会了计算两个数字乘积的一种算法  也许你的小学老师不称它为算法  也许你没想过它是一种算法  但是你的确学到了一套定义精确的规则 它可以将输入数据 也就是两个数字  转化为输出 也就是它们的乘积  这就是一种解决计算问题的算法  这里我们停一停 详细说明一下 本课程中许多讲座会沿用一种模式  首先 我们明确要研究的计算问题  什么是输入 什么是期望的输出  然后我们会给出解决方案 即给出一种算法  使输入转化为输出 在整数乘法中  输入只是两个n位数x和y  数字x和y的位数n是任意的 但是如果想来点刺激的 你可以想象n很大  比如几千或者更多  像在进行某种加密时 就必须使用很大的数字  
1:12
我们还需要解释什么是期望输出 在这个例子里很简单 就是x和y的乘积  插句题外话 我三年级的时候  在学习整数乘法的算法的同时  我书法课得了C 并且之后我也 不觉得我的字有多大长进  许多人在课程结束后告诉我  他们还倒挺喜欢我这奇葩手写体  但是如果你欣赏不了 网站上也有这些幻灯片的印刷体版本  如果觉得辨认手写体太麻烦 建议你在听讲座的过程中参阅它们  如果觉得辨认手写体太麻烦 建议你在听讲座的过程中参阅它们  回到整数乘法上 我们现在已经准确定义了问题  包括输入和期望的输出 现在就要讨论解决问题的算法了  也就是你小学三年级学的那玩意儿  我们评估该算法性能的标准  是它需要执行的基本运算的次数  这里的基本运算可以理解为将两个 个位数相加或相乘  然后我们要研究一下 输入长度为n时   若采用三年级算法 需要执行的基本运算次数  即它与n的函数关系  
2:36
下面是一个具体的例子  就用1234和5678这两个数吧  提醒一下 在快速演示这个算法时  我们的关注点应该在于 这个算法做了多少次基本运算  基本运算的次数与输入长度 有怎样的函数关系  在这个例子里，输入长度是4  正如你记得的那样 我们用下面的数的每一位  分别与上面的数相乘 得到几个部分积  首先 我们把4与上面的5678相乘  四八三十二 3进到十位 四七二十八 加3为31  写下1 进3 以此类推 在计算下一个部分积时 有一点小变化  即在个位加一个零 其他的和上个计算相同  即在个位加一个零 其他的和上个计算相同 后面两个部分积的计算过程同上 最后 把四个部分积加在一起 你三年级的时候已经意识到 这种算法总是正确的  也就是说 不管整数x和y是多少  只要你执行这个算法 并保证中间的每一步计算都正确  那么这个算法最终会得到输入的 两个数据之积 即x乘y  那么这个算法最终会得到输入的 两个数据之积 即x乘y  你永远不会得到错误答案 它总是正确的  然而 你也许从未考虑过  从开始执行这个算法 到得到最终答案 需要多长时间  也就是要做多少基本运算  亦即需要做多少次单个数字的加法或乘法  那么 现在我们来快速地大致分析一下  基本运算的次数与输入长度 有怎样的函数关系  
4:50
我们先从第一个部分积开始  我们计算22712这个数字的时候 是将4分别  与5 6 7 8这四个数字相乘 这就是4次基本运算了  下面的数的每一位都与上面的数相乘 乘积十位上的数字还要进上去  进位又涉及一些额外的加法 但是任何情况下  基本运算的数量最多是上面乘数长度的2倍  即最多运算2n次便可得出第一个部分积  第一个部分积并非特例  同理可得 得到每一个部分积都最多需要2n步基本运算  而部分积的总数为n 即与下面乘数的长度相等  也就是说 计算每个部分积需要2n次基本运算  且一共有n个部分积  所以要做2n^2次基本运算 才能得到图中所有蓝色的数字  也就是所有的部分积 然而这还不算完  我们还要把这些部分积加起来 才能得到最终结果  在这个例子中是7006652 这一步求和需要的运算量与之前一样多  也是最多2n^2次  所以一个很重要的结论是  如果采用三年级所学的乘法算法  那么随着输入的数据逐渐增大  基本运算数的增长方式是固定的  它与输入数据的长度具有函数关系  即基本操作数等于4n^2 是输入长度n的二次函数  例如 如果你把输入的两个整数的长度分别加倍  例如 如果你把输入的两个整数的长度分别加倍  那么采用这个算法的话  基本运算数会变为原来的4倍  类似地 如果把输入的两数长度 分别变为原来的4倍  那么基本运算数会变为原来的16倍 以此类推  
7:02
现在 无论你是哪一种小学三年级学生  或许你都会觉得 计算两整数之积的方法只有这一种  或者至少最好用的是这一种  然而如果你想成为一个真正的算法设计师  这种顺从陈规的想法是一定要抛弃的  关于算法设计与分析  Aho, Hopcroft 和 Ullman 很早之前写过一本十分重要的书  该书已经出版了40年了  书中有一句话我非常喜欢 就是这句  在列举了一些的算法设计范例后   作者这样说道  "对于一个优秀的算法设计者而言 最重要的原则就是拒绝满足"  此言得之   更简洁地总结一下  作为一个算法设计者 你的座右铭应该是  我们可以做到更好吗? 面对一个幼稚的、直接的计算题解法时  这句话尤其适用  比如说 整数乘法的三年级算法  你三年级的时候 不会问自己  有没有比这个直接的算法更好的方法?  我们下节课揭晓答案 翻译：JennySquirrel | 审阅： Cousera Global Translator Community 