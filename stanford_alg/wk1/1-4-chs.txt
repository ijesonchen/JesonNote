0:00 在这个视频里面 我将讨论这个课程的各个方面和主题 包括你将会获得的各种技能 需要的背景知识 课程相关材料以及可用的自我评估工具 我们以这个课程所涵盖的主题开始吧 该课程的内容与斯坦福大学校内课程的前五个星期一致 所有计算机科学专业的学生和很多毕业生学习这门课 该课程有5个主题 并且它们会有重叠部分 这5个主题是 分析算法性能的所需知识 分治算法设计模板 随机化算法设计 图论分析的基础知识 以及基本数据结构的运用与实现 课程的目标是 对上面的每个主题提供介绍及基本素养 详细讲解每个主题所需时间都比我们在这有的时间长得多 第一个主题最简短 也有可能最无趣 但这对于严肃地思考 算法的设计与分析是一个前提 这里的关键概念是大O符号 从概念上讲 它对于我们衡量一个算法运行时间的表现来说 是一个模型化的选择 它忽视了常数和低阶项 为更高阶段的算法设计提供了很大方便 而且大O符号关注大输入规模 将这种便利的分析数学化 而且不会有唯一的最优算法设计 没有任何一个解决问题的方式能够保证解决所有的 我们可能面对的算法问题 也就是说 几乎没有 所谓的万能算法设计技巧 算法设计的抽象思想 成功在不同领域广泛应用 这些相对宽泛的运用技巧是支柱 支撑着像这门课一样的算法课程 在这里 我们只有时间去深入的探索一个这样的 算法设计的范例 名叫分治法 以后的课程我们将谈论到另外的两个主要的算法范例 现在我们说说分治法算法 它是首先把一个问题 分成小的问题以待递归解决 然后快速的结合这些递归运算结果得到一个 你真正想要解决的问题的答案 例如 上一个视频中 我们看了两个算法 两个关于两个大整数相乘的分治算法 后面的视频中 我们将会看到很多不同的分治法应用 我们将知道如何设计快速的分治算法 用来解决 诸如矩阵乘法 最近点对和计算几何之类的问题 此外 我们还会覆盖一些有用的方法 用于分析像这些的递归算法的运行时间 2:37 第三个部分 随机算法指的就是从某种程度上来讲 在运行中投掷硬币的算法 如果你多次的运行它 计算同一个输入 它的运行过程将是不一样的 事实证明 这绝对不直观易懂 让一个算法在它内部进行随机 往往能得到简单 优雅 并且实用的算法 能够解决多种 算法问题 经典案例就是随机化快速排序 这个例子的算法和分析 我们将会用几节课来详细的讲解 随机化质数检测是我们会接触到的另一个杀手级应用 我们还会讨论图形分解的一种随机方法 最后我们会讲如何在哈希函数与哈希表分析中应用随机化 这门课程的主题之一 同时也是我希望你们能在课程中 学到的一项实际技能 就是了解一些操作数据用的计算方法 它们快到可以在某种程度上说几乎不花时间 这就是说 你在某一个算法上投入的时间 几乎不比你在检视或者读取数据上花的时间要多 当你有一个非常快速的算法时 它的运行时间与读取数据的速度几乎相同时 你应该准备好将它付诸应用 举例来说 在一个处理环节中 只要这个算法可能有用 你就应该把它准备好 随时调用 排序是一个典型的非常快速 接近不需耗时的算法 但是也存在着在处理更复杂的数据的优良算法 回忆一下 图是一种由若干顶点和 链接顶点的边组成的数据结构 图模拟不同种类的网络 所以即使图 比简单的数组复杂的多 还是有一些非常快的 分析图结构的方法 在这门课程中 我们会着重介绍 计算连通性信息和寻找最短路的方法 也会接触到一些方法 用来探索社交网络中的信息结构 最后 数据结构通常是优秀算法中重要的组成部分 一个数据结构应该有效地组织数据 以便快速对这些数据 进行处理 不同的数据结构支持不同的操作方式 我们假定你熟悉基础编程课程中会遇到的数据结构 包括数组 不定长数组 列表 栈和队列 最好是你已经稍微接触过了树和堆 或者你愿意在课程外 稍微阅读一下关于它们的材料 不过随着课程进行 我们也会 对上面提到的每种数据结构进行简短复习 我会细致讲解 两种极为重要的数据结构 第一种是平衡二叉搜索树 这些数据结构动态地保持一组元素的顺序 同时 支持很多种操作 这些操作的时间复杂度可以是对数级别的 第二个我们会讨论到的重要数据结构是哈希列表或  称作哈希图 这种结构记录一个动态的集合 支持极为快速的  插入和搜索 我们会讲这种数据结构一些权威经典的应用 以及在这种数据结构的典型实现运行的详细过程 在算法的设计分析中 有一些重要概念我们没时间  在这五周的课程中涉及到 这其中有一部分会 在后续课程：算法设计与分析2 中涉及到，这个课程和 斯坦福大学校内相关课程的后半部分吻合 这个后续课程的前半部分讨论了另外两种算法设计思想 首先就是贪心算法的设计 它用于最小生成树 时间调度问题和信息编码理论中 第二就是动态规划算法 例子包括 它在基因序列和社交网络最短路拟定中的应用 应用 后续课程的第二部分讨论NP完全问题 以及如何解决他们 NP完全问题是什么呢? 有一个你可能听过的著名数学猜想 叫做  "P不等于NP"猜想 NP完全问题是那种在这个猜想下 不能被高效算法解决的问题 我们会讨论  NP完全的理论 着重介绍它对你这样 一个算法设计者的意义 我们会讨论NP完全问题的解法 包括一些能够解决特殊情况的快速算法 高效的有可证效率保证的回溯算法 还有指数时间复杂度的 在本质上比暴力搜索优秀的算法 当然 还有一些 重要的主题 不能在这两个五周的课程中出现 根据需要 也许会有更多的课程 来介绍更高级的主题 你上这门课会花一定时间 和精力 所以 很重要的是问一句 你希望从这门课程中得到什么? 你会学到什么技能? 即使它本身不是编程课 它也会让你成为一个更好的程序员  你在描述和分析算法的时候会得到很多的练习 你会学到  算法设计思想 以及真正的和很多不同领域不同问题相关的  高水平的问题解决策略 还有 预测这种算法效率的工具 你会学到几个极其高效的  高速的处理数据的子程序 以及一些有用的 可以在你的程序中直接利用来组织数据的数据结构 第二 虽然这本身不是一节数学课 但我们会用到相当多的 数学分析 这会增强你的数学分析能力 你可能会问 为什么数学会与一门算法设计和分析课相关 它更像一门编程课 我来明确一下 我对于仅仅告诉你们知识点或者机械重复代码毫无兴趣 那些你们已经可以在网页或者好的编程书里面找到 我在这门课里的目的 以及我认为我能够最好地补充 那些你们可能已经得到的资源的方式 就是解释 为什么事情是这样的 为什么我们用这种方法分析算法 为什么各种超级快的算法实际上那么快等等 并且事实证明 良好的算法思路经常要求复杂的数学分析 才能充分地理解 你将获得对我们这门课讨论的 具体算法和数据结构的基本洞察力 并且希望 普遍而言 在你的其他工作上 大部分见解将能证明是有用的 第三 可能与你们中那些非计算机专业的人最相关 这门课会帮助你学习如何 "（按照）算法般思考" 实际上 学习算法之后很难不看到他们无处不在 无论你在乘电梯 观察一群小鸟 按照你的投资机会买卖股票 甚至是观察一个婴儿学习 正如我在上一个视频里所说 思考算法变得更有用 更流行 如果你不是CS之外的专业 比如生物 统计以及经济 第四 如果你有兴趣体验当一名计算机科学家 那么 某种程度上 你将一定想要知道 我们将要包含的所有主题的基本素养 实际上 让算法有趣的事情之一就是它真的让你觉得你正在学习 许多过去50年来最伟大的灵感 因此 学习完这门课之后 当有人抛出一个关于Dijkstra(狄杰斯特拉)算法的笑话时 你将不再感到是计算机科学的外行 你就会明白他们的意思 最后 毫无疑问学习这些材料有助于（回答）技术面试问题 清楚地讲 我在这里的唯一目的是教授你们算法 不是帮助你们准备面试 但是多年来 我的无数学生给我讲 掌握这门课中的概念如何帮他在被问到技术问题表现完美 这让我很高兴 我告诉你们 这是最基本的东西 那么 我对你们的期待是什么呢 诚实地讲 其实没什么期待 毕竟这不是一门免费在线课程的重点 就像这门课 任何人都可以学习并按照他们的意愿付出努力 作为老师 心里有一个或几个优等生是有用的 我想我继续讲 让你们明白我是怎样思考这些课程内容的 我认为我正在教授的学生是怎么样的 所以再说一遍 请不要感到沮丧如果你不符合优等生模板 我很高兴有这个机会教授你们关于算法的知识 不论你是什么样的学生 所以首先 我觉得至少你懂一些编程 例如 考虑前面的课 我们谈论了关于 一个递归方法求解两大数相乘 我提到了特定的数学表达式 当时我们标了星号并且用绿色圈了一下 那个表达式是如何自然地翻译成递归算法 尤其是 我当时已经假设你们熟悉一点递归程序 如果你接受我在那节课的陈述 如果你觉得 你可以写出整数递归相乘的代码 基于我给你们的高级大纲 那么你应该比较适合这门课 你应该做好准备了 如果你不适应我当时讲的内容 那么 你可能不适应这门课里我们谈论程序用的相对高级的概念 但是我鼓励 无论如何 继续看下面几个视频 尝试看看 能否尽力理解这些信息 现在 虽然我的内容针对那些懂编程的人 但是我没假设你要懂得任何一种特定的编程语言 任何一种标准命令式语言 比如C Java或者Python都可以 为了让尽量多的人可以跟上这些课 坦诚而言 也是为了促进 坦诚而言 也是为了促进 在相对抽象的概念层次思考编程的能力 我不会 我不会用任何一种特定编程语言描述算法 我只会用高级别的伪代码 或者简单点只用英语 我会假设你自己有能力把这样一种高阶的描述 用你最喜欢的语言表现出来 事实上 我非常鼓励每个人能够在课后把所有讨论过的算法 都用自己的语言去实现一遍 这会加强你的理解 感受这些算法的精妙之处 事实上 很多专业计算机科学家 和程序员都是在他们真正用程序实现了一个算法之后才感觉理解了它 我们在课程的任务中也会特别安排这种编程作业 换句话说 如果你只是在找一门能让你 把代码复制粘贴到你的程序中去运行 而完全不用去理解为什么这段程序能成功的课程 这门课程并不适合你 外面已经有不少 这类的书籍了 第二 我还希望你们至少有 一定程度的数学知识 即使 只是积累的一些知识碎片 更准确的说 我期望你能够 进行基本的逻辑论证 包括 推断证明和反证两种方式 你们还需要熟悉一些基本的数学记号 比如 一些标准量词 求和符号 比如 如果你了解一些离散概率分布 那么 随机算法相关的课程还有哈希对你来说会容易一些 但是 除去这样一些基本知识 这门课程会是独立的 你甚至不需要知道积分的计算 除了分析随机快速排序算法时突然单独出现一个简单积分 你们绝大部分人过去都学过数学 但是你可以 把这作为一种复习进修 进一步打磨 网络上有很多相关资料 并且我很希望你们能去探索然后发现自己喜欢的 不过 这里我可以先推荐一个很棒并且免费的课程 Mathematics for Computer Science(计算机科学中的数学) 作者是Eric Lehman和Tom Layden 这门课很容易搜到 课程里面涵盖了所有我们这门课需要了解知识 还有大量的 其它知识 为了我们这门课能够更广泛更容易的上手 我们会把课程依赖的其它材料尽可能的减到最少 这门课是相对独立的 并且我们会提供讲义的PPT和PDF 有时 我们也会提供一些额外的阅读材料 这门课没有教科书 不过 这并不是说不用看书 而是 大部分的材料包含在了一系列非常棒的算法书籍中 我在这里推荐四本 前三本对我的思维方式还有 授课方式都有很大的影响 因此是公认的经典书籍 关于第二本还有个很酷的事情 就是作者Dasgupta Papadimitriou和Vazirani 在网上发布了一个在线的免费版本 因此 如果你在网上搜一下书名和作者 你应该很容易搜到 同时 这也基本上是我推荐第四本书的原因 第四本书的作者也在网上发布了一个可用的 完整的版本 并且和我们将要讨论的材料很匹配 如果你想了解这门课程中知识点的细节 或者你想从另一个角度去思考我讲到的问题 这些书籍会是很好的资源 当然还有很多很棒的书籍 没有在这里一一列出 因为我希望你们 能够主动去探索发现适合你的 在课程中 我有时会要求你 去编程实现一个算法 然后解决一个具体的不能手算的问题 我们并不关心你用什么语言 用什么环境 我们只需要你能给出一个最终答案 也就是说 我不会做任何具体要求 你能处理这个问题即可 如果你需要一些编程环境的帮助和建议 我们建议你通过课程论坛 去向其它同学求助 最后我们再说一些关于课程评分的事情 这门课程本身并没有官方要求的评价标准 但我们每周还是会布置任务 有三个原因 第一是能够让你们自我检测一下 可以帮助你们了解自己对学习材料理解了多少 哪个知识点已经掌握 哪个还没有 第二个是想稍微施加一点压力 设置截止日期也是这个目的 以便让你们更有动力去完成所有的课程 设置截止日期还有一个很重要的原因 就是能够让 班级上的同学学习进度同步起来 这样当同学们 在班级论坛中讨论问题寻求帮助时也会更有效率 最后的一个原因就是满足那些想要挑战自我的同学 在学习了课程材料的同时 能够加深对算法的理解 这门课已经有成千上万个学生 因此能够自动评分是非常重要的 但是 现在像这类的在线免费课程才处于1.0时代 因此可以用的自动评分工具还相当稚嫩 所以 我们只能尽量做好 不过说老实话 这很难 甚至 通过现有的工具 几乎不可能从深层面去理解你算法的设计 因此 这门在线课程并不能够取代最原始的斯坦福校内版本 这上面给出的任务和考试要求 跟斯坦福教授的课程也会有所不同 为了弥补这个 我们会时常发布一些附加的算法设计问题 可能通过视频 也可能是补充的任务的形式 我们没办法对这些问题去评分 但是希望你有兴趣挑战它们 并且通过班级讨论的论坛跟同学们讨论 可能的解法 并最终尽可能的解决你关于课程 的所有疑问 让我们最后再明确一下我们的目的 就是尽可能的理解算法背后的意义 