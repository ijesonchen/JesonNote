0:02 如果你想计算两个整数之积 除了三年级学的那种方法外  还有没有其他更好的方法？ 为了得出最终结论  我会先提供给你一些工具  为之后提到的分治算法做铺垫  本节课的目的是使你树立一个信念  就是算法设计的空间十分广阔  除了三年级学的方法之外 还有好多计算两整数之积的方法  本节课的核心是介绍一种乘法 叫做Karatsuba乘法  下面就让我通过具体的例子  介绍一下Karatsuba乘法  我们接着用上节课的那两个数:1234和5678  我将通过执行一系列步骤 得到它们的乘积  但是 这些步骤明显不同于  我们小学所学的乘法运算步骤  然而得到的答案将完全相同 1:04 这一系列步骤会使你感到十分迷惑  就像从帽子里变出一只兔子一样 而本节课其余的时间  将更系统地讲解Karatsuba算法究竟是什么  以及它为什么有效 但是首先你要明确一点  那就是 算法设计的空间 比你想象的广阔的多  计算整数乘法之类的问题  有非常非常多的方法 1:34 首先 我要把x和y的前两位和后两位  分别用字母来表示 例如x的前两位 也就是56  56就用a来表示  类似地 b代表78 c代表12 d代表34 1:53 接下来我要做一系列运算 参与运算的只有a b c和d  之后我会将一系列运算的结果 以某种神奇的方式汇总  最终得到x和y的乘积  首先 我要计算ac的乘积  然后计算bd的乘积  我将跳过这些简单的计算 直接告诉你  a乘c等于672  b乘d等于2652 接下来第三步中 我要做一件更难以理解的事  我要分别算出ab之和 cd之和  然后计算上述两个和之积  也就是计算134与46的积  结果是6164 最后 我要从这个结果中减去ac之积 再减去bd之积 也就是用6164  减去2652 再减去672  如果你的确是用第3步减去了前两步的结果 你会得到2840  现在 利用第1,2,4步的结果  可以通过一种非常简单的方法得到x和y的乘积  做法是这样的 我们从第一步的结果 即ac的乘积开始  在它后面加四个零 然后我们取第二步的结果  不做任何改动 接着取第四步的结果  在后面加两个零 最后把这三个数加起来  从右到左 得到2,5,6,6,0,0,7  如果你回顾之前的课  你会发现 这个结果跟你用小学算法 算出的结果完全相同  事实上 这个数字就是1234与5678的乘积  这里我重复一遍 你可能无法 凭直觉理解这些计算过程  你可能不清楚刚才发生了什么  然而除了觉得它像一个谜团或者阴谋之外  我更希望你体会到  三年级的算法不是唯一的解决方案  还有很多计算整数乘积的方法 它们和你小时候学的那种均有天壤之别  一旦你意识到算法设计的空间如此广阔  你必然会思考 能不能找到 比三年级的算法更好的方法?  或者事实上 是否上述算法 已经优于三年级算法了?  在解释Karatsuba乘法的原理之前  让我们从一个更简单、更直接的递归方法开始  这里我假设你有一点编程基础  具体讲就是 你知道什么是递归算法  就是一种在子过程中不断调用自身 同时缩小输入的算法  那么 如何将递归法应用于乘法问题中呢?  你看 输入的数据是两个四位数  你看 输入的数据是两个四位数  为了将递归法应用于算法中 你需要将输入数字变小  我们之前已经做过这件事情了  比如说 我们把5678拆成了两半  也就是56和78 5:33 一般而言 一个长度为n的数x  可以被拆分成两个长度为n/2的数  x的前一半等于a*10^(n/2)  x的前一半等于a*10^(n/2)  后一半等于b 本例中a=56 b=78  n=4 10^(n/2)=100  c=12 d=34 接下来我将解释有关的递归调用  我们要把x和y的乘积  用a b c d表示  并做一个简单的计算 6:17 将x和y的展开式相乘 我们得到一个由三部分组成的多项式  第一项含10^n  系数是ac  第二项含10^n/2 系数是ad+bc  最后一项为bd  我们将多次提到这个表达式  所以我要把它圈起来 还要给它一个简称  就叫它星式吧 6:52 为了简化问题 我掩盖了一件事情  就是我假设了n是偶数 不过如果n是奇数的话  你一样可以用这个递归的方法计算整数乘法  直接点说 就是如果n=9  你可以将其中一个输入数据的前5位和后4位拆开  其他步骤与上述完全相同 星式的重点在于  尽管它是基本代数运算的产物  但它隐含着一种递归的方法  如果你想得到x和y的乘积 为什么不先从星式入手呢  它只含有a b c d的乘积  盯着星式看一会 你会发现其中有四个相关的乘积  每个乘积都由两个更小的数字组成  也就是ac ad bc和bd 那么 为什么不先递归地计算出这四个乘积呢  毕竟这样一来 输入数据会小很多  在这四个递归调用返回给我们结果后  很明显 我们就可以计算星式的值了  我们在ac乘积后面加n个零  然后把ad和bc用小学学的方法相加 在结果后面加n/2个零  最后仍然用小学的方法 把这三个数加起来  我又掩盖了一个细节  就是真正的递归算法必须有一个基准情形  我希望你们都清楚 递归算法需要一个基准情形  如果输入的数据足够小  那么与其继续递归 不如直接计算答案  当然 递归算法本身也需要一个基准情形 来防止其无休止地调用自身  对于整数乘法 基准情形就比如  计算两个个位数的乘积  这时你直接采用基本运算 得到结果即可  所以 我现在想说明的是  的确存在一种递归法可以计算整数乘积  这种算法看起来和你三年级学的非常不同  然而用你最喜欢的编程语言  你可以轻松地将它编写出来  现在 对于这个算法是好是坏  你应该毫无概念  这个算法与三年级算法相比是快是慢?  等一下你就会知道答案  我们先来改进一下这个递归算法  从而得到成熟的Karatsuba乘法算法 为了解释对它的优化  我们来回忆一下之前提到的星式  星式用更小的数a b c和d  表示了x和y的乘积  在这个直接的递归算法中 我们执行了四次递归调用  来计算四个乘积 它们是计算星式所必须的  但是如果你仔细想想  星式中我们关心的只有三个量 即三个系数  我们关心ad和bc  本质上是在关心它们的和 即ad+bc  由此产生一个问题 既然我们关心的只有3个量  能不能只执行3次递归调用 而非4次?  事实上是可以的 下面是具体做法 10:31 第一个系数ac 和第三个系数bd 仍然和之前一样递归地计算  接下来 我们将递归地计算(a+b)(c+d)  而不是计算ad和bc  将(a+b)(c+d)展开  会得到 ac+bd+ad+bc  下面是Karatsuba乘法的关键  它其实是19世纪数学家高斯发明的一个技巧  我们用第3步的结果  减去前两步的结果 11:17 减去第一步的结果后 ac项不见了  减去第二步的结果后 bd项不见了  于是只剩下了ad+bc 即星式里中间项的系数  之前所讲的简单的递归算法中  我们执行了四次递归调用 并将四个结果组合在一起  现在我们又得到了一个简单的递归算法  它只需执行三次递归调用  且在此基础上只需做小学的加减法  所以你只需要对这三个递归结果 做一点特殊处理  然后做一下转换 在后面加零  最后和之前一样求和 12:04 这简直是在搞大新闻 它向我们展示了  即使在最简单的计算问题中 创造力也可以发挥作用  你也许还在问那个问题  这个奇葩的算法真的比三年级学的那种算得快吗?  这个实在不容易看出来 因此我们过几节课再来讲  到时候我会提供给你一整套工具 来分析所谓分治算法的运行时间  而这个问题会作为它的特例  敬请期待 翻译：JennySquirrel | 审阅： Cousera Global Translator Community 