在这个视频中 我们将开始讨论哈希表 我们首先将注意力集中在 它支持的操作 和 经典的应用上 哈希表是非常有用的 如果你想成为一名真正的程序员或者电脑科学家 你一定要学哈希表 我相信 你们中的许多人 以前已经在你的程序中已经用过了 但另一方面有趣的是 从所支持的操作的数量上来说 哈希表并不能支持很多 但在它能做的事情上面它作的很好 那么什么是哈希表呢 不考虑实现的话 从概念上来说 你可以把哈希表当成一个数组 数组非常善于做的一件事是 支持即时随机访问 所以如果你想知道数字十七 在某个数组的什么位置上 轰 用几个机器指令你就能找到 想改变第23个位置值上内容? 一瞬间就好了 让我们想这样一个例子 你想记住 你朋友们的电话号码 如果你够幸运 你的朋友们的爸妈都是 不同寻常又没想象力的人 你的所有朋友的名字都是 1到10,000的数字 在这种情况下 你可以保存一个有10000个链接 的数组 在储存电话号码时 举例来说 你最好的朋友173 你可以把他的电话 存在这个链表的173号位置上 所以这个基于数组的解决方案 很好用 即使你的朋友在换 你结交了一些新朋友 失去了 一些老朋友 只要你所有的朋友的名字都是 1-10,000之间的整数就行 当然 你也有些朋友有更有意思的名字 Alice, Bob, Carol (人名) 等等 还有不同的姓氏 原则上 你可以有一个数组 这个数组中的每个位置 都可以存一个你遇到的名字  每个位置上至少可以保存30位的字母组 但是 当然了 你的数组就巨大无比 它将会有26的13次方这么大 你也没有可能实现它 所以实际上你要的是 一个大小合理的数组 比如说 一起看球的人的数目 可能有几千人 他们的位置不是用1-10,000的 数字或者整数来索引的 而是他们的名字 你想做的是 根据他们的名字进行随机访问 所以你在这个数组中查找 引号 Alice 反引号 的位置 轰 Alice的电话号码瞬间就出来了 从概念层面上来说 这就是 哈希表能做的事情 在哈希表的驱动下 有很多神奇的东西 其中一些在其他的视频中 我们将多少会讨论到 你有一个映射将 键 比如你朋友的名字 和 数组中数字的位置 关联起来 这是通过哈希函数做到的 而不是实现方式 这是由哈希表所赋予的功能性 如同一个数组 数组的位置 被你存储的键索引 你可以将哈希表的用途想象成 保留一组可能会演变的东西 你知道 你想保留的这组东西 会随着用途改变 可能是任何数目的东西 所以如果你在运作一个电子商务网站 你想对交易进行跟踪 再一次 你知道你可能是在对人进行跟踪 就像 你的朋友和有关 他们的数据 也许你在追踪 IP地址 比如说 你想知道他是谁 你的网站有没有特殊的访客 等等 更正式一点来说 最基本的操作 你需要能够 在哈希表中插入内容 在很多 但不是全部的应用中 你也要能从哈希表中删除内容 通常来说 最重要的操作是 是查找 这三种操作 都是基于键的方式完成的 和大多数情况一样 键应该是 你所关系的东西的 唯一的标识符 比如说 对于员工来说你可以用 社会保险号 对交易来说 你可能会用交易ID IP地址本身就可以作为自己的标识符 有时候 你所做的所有事 就是跟踪键本身 比如IP地址 可能你只想 记住一列IP地址 你并没有其他相关数据 但在很多应用中 伴随着键的 是许多其他的东西 伴随雇员的社会保险号码 你可以记住这个雇员的其他许多数据 但当你进行插入操作时 或当你删除 或是查找时 你利用键进行操作 通过这个键 比如说 在查找时 你将键放入 哈希表中 然后哈希表就会 返回与键相关的数据 有的时候 我们 听到人们将支持这种操作的 数据结构称为字典 所以哈希表主要是为了 用字典的思想进行查找 事实上 我觉得这个概念 有一点误导 你能找到的字典大多数是以 字母顺序排列的 所以他们支持 像二分查找这类东西 我想在这 强调的是 哈希表并不会保留 他支持的元素的排序 所以如果你想 排序并且进行基于顺序 的操作 比如你想找 最小或最大值或者类似的事情 哈希表可能就不是合适的 数据结构 你想做更多的事情 你可能想看一个堆或者 看一个查找树 对于那些你只需要查找某些内容的操作来说 你只想知道里面有什么 没有什么 那么 你的脑海中应该就有一个 灯熄灭了 你可以说 让我来考虑一下哈希表 这可能是这些应用的完美 数据结构 现在来看看基于 菜单的操作 你可能不会太印象深刻 是的 哈希表就是这样 从某种意义上来说 它并不能做很多事 但重申一次 当它做它能做的事的时候 它非常好用 那么 首先 哈希表为你提供了以下了不起的保证 所有这些操作的运行时间 都是常数 这是利用了将哈希表 看作数组的思想 它们的位置被键 方便的索引了 所以 如同数组支持随机访问 在常数时间内 你可以知道 数组中的某个位置上有没有内容 是什么内容 类似的 一个哈希表 能让你在常数时间内 基于键进行查找 那么有什么 局限性呢 主要有两点需要注意 第一是 哈希表很容易就 会实现的不好 如果实现方式不好 优点就无法得到保证 所以哈希表的优点是基于合理的实现 当然 如果你只是 通过调用一些有名的库 来使用哈希表的话 你可以假设哈希表已经被合理的 实现了 但当你不得已需要 自己实现哈希表和 哈希函数的时候 不同于我们之后将讨论的 数据结构 你们中的有些人 在职业生涯的某些时候 不得不自己实现哈希表 而只有合理的实现才能发挥哈希表的优点 在其他的视频中我们将进一步讨论 第二点需要注意的是 不同于我们在这么课中 解决的大多数问题 哈希表没有最坏情况 保证 对于一个给定的哈希表 你无法保证对每一组可能的数据 你可以得到成本和时间 对于non-pathological数据来说 在一个合理实现的哈希表中 你可以得到操作的花费和时间 在其他视频中 我们将继续讨论这些问题 但现在 首要任务是 哈希表 常数时间 和一些 需要注意的事项 我已经讲解了哈希表支持的操作 和较好的思考哈希表的方法 我们来看看哈希表的一些应用 这些应用从某种程度上 都只是哈希表的牛刀小试 但他们也非常实用 这种实用的东西总是我们最先想到的 我们要讨论的第一个应用 仍然是一个典型 就是从一堆对象中移除重复元素 被称为重复数据删除问题 在这个问题中 输入一定是一个对象流 当我提到一个对象流的时候 你的脑海中应该有两个对象流的经典例子 第一你可以想象你有一个巨大的文件 所以你有一个你支持的网站上面 所有变动的日志 或者是一个商店一天之内的所有交易 你扫描一遍这个巨大的文件 你在一个外层循环里 这个循环一行一行读取巨型文件的信息 我脑海中另外一个流的例子就是 你随时间推移获得新数据 你可以想象你在跑一个 在路由器上运行的软件 数据包在以极快的速度通过这个路由器传入 你可能在检查 比如 IP地址 以及信息发送人 这个检查依赖在你的路由器中经过的数据包 这就是一个对象流的另一个例子 然后现在 你要做什么呢? 你要做的事情就是忽视重复数据 只记录流中互不相同的数据 我希望你可以很容易想到 为什么你在不同的应用中 想做去重这件事 比如 如果你在跑一个网站 你可能想要记录互不相同的访问者 他们在某一天或者某一周访问你的网站 如果你想做一个类似网络爬虫的东西 你可能需要识别重复文件 只把每一个记录一次 举个例子 如果搜索引擎结果的 第一条和第二条 通过不同的URL(统一资源定位符) 指向完全相同的网站 真是很烦人 搜索引擎一定要避免这种情况 所以你需要识别重复网页 只报告一个 解决方法就是哈希表 简直简单的可笑 所以每一次新对象加入对象流时 你查找它 如果它已经存在 这个新对象就是重复的 忽略它 如果它不存在 这就是一个新对象 你把它记录下来 这就是解决方法 所以当流结束的时候 比如你结束读入了某个巨大文件 如果你只是想要输出所有唯一对象 哈希表一般支持线性扫描 所以你只需要当流结束的时候 输出去重结果 让我们看第二个应用 也许重要一点 但还是很简单 这就是编程作业5的考题 这就是叫作2-sum的问题 输入是一个含有n个数字的序列 这些数字是无序的 输入还包括一个目标和 我把它叫作T 你想要知道的是 在这n个数中是否存在两个数 它们的和是T 最好想朴素的算法就是 遍历输入数据中所有C N 2对元素 分别检查每一对 现在这是一个平方级别的算法 现在我们当然要问 我们可以做的更好么? 答案是肯定的 首先我们来看如果不用数据结构该怎么做 所以如果你很聪明 但是没有使用类似哈希表的数据结构 有一个比较合理的方法 优化之前的朴素算法 通向更优解的第一步是上来就排序 比如使用归并排序或者堆排序 类似的排序操作是nlogn时间的 所以你可能会问为什么要排序 又一次 你要知道 就是 当你想在平方基础上优化的时候 你就要想到将数据排序总会有点用 好 所以你可以在nlogn时间内排序 相当于没有代价 所以为什么将数组排序有用呢 比较聪明的意识是 对于数组的每一个元素 就拿第一个举例子 现在我们知道应该寻找什么元素 得到目标的和T 如果我们的目标是加和得100 在排好序的数组中第一个元素是43 我们就在这个排好序的数组中找57 已知在一个排好序的数组中检索 非常容易 二分搜索就可以 只消耗对数时间 所以对于n个元素 中的每一个 我们可以查找它的另一半 换句话说 对于每个x我们可以用 二分查找搜索T-x 调用二分搜索消耗logn的时间 所以排序预处理加速了这n个检索操作 这就是排序的好处 所以在第二步 因为我们做线性个数个二分搜索 所以时间复杂度就是搜索的个数n 乘以每个搜索所用时间logn 这就是另一个Θ(nlogn) 所以这还是很帅的 如果你没有什么算法基础 我觉得你想不出来这个nlogn解法 这对于朴素的平方算法来说 已经是一个很大的优化了 但是我们可以做的更好 我们没有理由在2-sum问题上 卡在一个nlogn的下限上 显然 因为输入数组无序 我们需要处理所有的整数 所以我们不可能比线性时间更快 但是我们可以通过哈希表达到线性时间 所以你可能会在这问一个好问题 这个问题的什么线索 特性 暗示我们应该使用哈希表 好 所以哈希表可以极大优化 需要重复检索的应用 如果我们观察这个nlogn解法 当我们想到需要对每个x 搜索t-x的时候 我们就意识到 实际上我们需要排序的唯一理由 就是支持检索 这就是二分搜索在这里的意义 所以我们说 啊哈 第二步中的所有操作就是重复检索 这需要检索数目n乘以检索时间 logn的花销 我们浪费了 哈希表只需要线性时间 所以想到重复检索 叮叮叮 我们来用哈希表吧 这也正是给了我们 线性解法的东西 所以通过哈希表惊人的能力 我们得到了以下惊人的 2sum问题题解 但是这个问题还是会提醒我们 最好运用实现得很好的哈希表 而且最好不要有 比较病态的数据 所以比起排序 你只是将所有元素 插入哈希表 插入消耗时间 所以这是线性时间 而不是我们想要的nlogn 当所有元素都在哈希表里的时候 我们只需要做和nlogn解法一样的事情 对于数组中的每一个x 我们寻找它的另一半 t-x 运用的是哈希表提供的常数时间的查找 当然 对于一些x 你能找到 相应的t-x 然后你就可以返回x和t-x 这证明了的确有一对数字的和是目标和 如果对于数组A中的每一个元素 你都不能在哈希表中 找到对应的t-x 那么当然 输入数组中没有整数 满足两整数之和为T的要求 这个问题被正确地解决了 不仅如此 插入是常数时间的 这意味着第一步将会是O(n)时间 查找也是常数时间 这意味着第二步也是线性时间 所以非常令人惊奇的是 有很多不同的计算机科学应用 需要重复查找操作 所以拥有一个超级快的查找操作 像哈希表提供的那种 让这些应用可以处理极大规模的数据 这是非常令人惊奇的 这种操作驱动了很多现代应用 让我来举几个例子 如果你查找资料或者在网上做调查 你会快速找到更多相关的应用 激励研究者们努力开发 支持快速检索操作数据结构的原动力 来自人们刚开始建立编译器的时候 这是非常久之前的事情 大概在上个世纪五十年代 这些重复检索操作 在之前没有探索过 是编译器建立过程中的一个瓶颈 在编程语言的早期时代 那就是哈希表的早期应用之一 就是支持快速检索 提高编译速度 跟踪函数名与变量名 等等 哈希表技术也对网络路由器软件非常有用 比如你可能想拦截来自某些源头的网络流 比如 你怀疑某一个IP地址 被垃圾邮件制作者控制了 所以任何来自那个IP地址的信息流 你都需要忽视 你甚至不想让它到达终端主机 到达计算器或者任何人的台式机 或者是某个人的移动设备 而是保持在网络里 你想扔掉来自某些中心的数据包 所以那个问题要求什么呢? 好 你会有一个IP地址的黑名单 你拒绝来自这些地址的信息流 那么路由器面临的任务就是检索问题 如果数据包以一种快的疯狂的速度输入 你想在一瞬间内查找来源IP地址 是不是在黑名单里 如果它在黑名单里 你扔掉数据包 如果不在黑名单里就接着发送这个数据包 另外一个完全不同的应用是 加速搜索算法 当我提到搜索算法的时候 我想的是 类似一个下棋游戏的程序 这个程序穷搜游戏状态数 我们在这个课中已经讲了一系列 图搜索算法 但在我们讨论 深度优先搜索和广度优先搜索的时候 我们关注的是那些你可以 画下来的图 你可以将它们存储到你的主存或者机器 或最不济情况下 存在机群里 这些是那些和网络图差不多大的图 或者更小 但是在下棋游戏之类的背景下 你要关注的图比网络图大的多 所以在下棋游戏中 我们关注的图是什么样的呢? 图的节点对应一个棋盘上 棋子所有的可能排列方式 这个图要包含你在下棋游戏中可能遇到的 每一种棋盘 棋盘结构是超级超级多的 你永远也不可能有能力把这些结点 写下来 这个图的边从一种棋盘结构 通向另一种棋盘结构 这些边就是棋子的合法移动 如果你能将一个主教从一个地方 移动到另一个地方 你就从一个棋盘结构到了另一个棋盘结构 这两个结构中有一条对应那个移动的边 现在你不可能把这个图画下来 所以你不可能像我们之前一样实现 深度优先或广度优先搜索 但是你还是想要做图搜索 对吗? 所以你希望你的计算机程序 至少算你下一步可能走的那些棋盘分支 那和在这个图中搜索是等效的 现在你如何记录图是非常重要的 你不希望做重复的工作 你不希望搜索你已经搜索过的东西 那非常傻 而且可能会导致死循环 等等等等 你还不能仅直接记录到达过哪记录棋盘 那个问题规模太大了 但是记录搜索过图的哪里 本质上是一个什么样的问题呢 本质上那是个检索问题 这正好就是哈希表存在的目的 说的更具体一点 当你讲哈希表用在比如一个下棋游戏中 你会记录下初始结构 你会模拟着尝试这个结构上 所有可能的移动 然后你的对手会移子 你会接着对应移子 在你做这个计算的时候 你会一直记录每一个 你经历过的棋盘结构 并把它们放在哈希表里 然后在你搜索一个结构之前 你在你的哈希表中检索它 看看你之前是否经历过这个棋盘 如果经历过 就不管它 都经历过一遍了 所以下棋游戏 通过在允许时间内尽可能多记录棋盘 运作 现在 在预计三分钟左右内 你不想浪费时间重复搜索 某些棋盘结构 你怎么记录你经历过什么棋盘结构呢 好 你经历过的所有棋盘都放哈希表里 在你搜索一个棋盘结构之前 你在哈希表中查找它 看你搜没搜索过这个棋盘 当然这些例子只是沧海一粟 我只是想列举几个 种类比较不同的应用 以便向你们证明 哈希表的应用很广泛 而它应用广泛的原因 你也知道 就是无处不在的对快速检索的需求 了解科技在何种程度上 被快速检索驱动这个事实 是令人惊异的 作为作业 我希望你们去从你们自己生活或者 世界上的种种科技中思考一下 设想一下哈希表会在哪里 被得天独厚地运用 发挥它快速检索的才能 我觉得你在几分钟内 就能想出来几个好例子 
下载
