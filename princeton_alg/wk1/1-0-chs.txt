0:01
大家好 我是普林斯顿大学计算机科学 教授 Bob Sedgewick(鲍勃・赛德维克) 这门算法课是由我和在普林斯顿大学 的Kevin Wayne(凯文・韦恩)开设的在线课程 首先我们会简要概述你们需要学习算法的理由 然后会提一下本门课程所需要的材料 那么 这门课到底教什么？这门课是算法的中级概论课 （Survey Course，大学里对没学过相关主题的学生提供的一种入门课） 我们会着重讲算法的程序实现以及实际问题中算法的应用 所以我们的两个重点是 用来解决问题的方法即算法 以及 与算法关系密切的用来保存问题中信息的数据结构 以下是我们要在这门课第一部分和第二部分所要讲述的内容 第一部分要讲基本数据结构、排序和查找 包括一些最基础的数据结构和算法 数据结构部分包括栈、队列、背包、优先队列 算法部分涵盖了排序的经典算法 包括快速排序、归并排序、堆排序、基数排序 还有经典的查找算法包括二叉查找树、红黑树、哈希表（散列表） 第二部分我们会讲更高级的算法 包括图论算法 经典的图的搜索算法、最小生成树和最短路径 字符串处理的算法 包括正则表达式和数据压缩 然后会讲一些使用前面课程讲解过的基本算法的高级算法 那么我们为什么要学算法？因为它们产生的影响非常深远 从互联网到生物学、商业计算、计算机图形 安全、多媒体、社交网络、科学应用等领域，算法都无处不在 它们可以用来制作电影、游戏 模拟粒子碰撞 研究基因组等等许多其他的应用 可见算法所影响的领域非常广泛 这是我们要学习算法的一个重要原因 算法也非常有趣，它有深厚的历史渊源 欧几里德研究了第一个算法 至少可以追溯到公元前300年 （最大公约数算法） 在上世纪三十年代，算法的概念就在普里斯顿 由丘奇和图灵正式确定下来 但大部分我们要学习的算法都是近几十年发明的 实际上有一些算法就是像我们这门课的 课堂上由本科生发明的 还有许多算法留待被你们发现 研究算法主要是为了解决那些非算法不可解决的问题 比如 第一堂课我们要讲 网络连通性问题。在一个大的对象集合中 对象成对相连 我们想知道能否经过这些连接从一个对象 到达另一个对象 从这个例子你可以看出 有没有这样一条路径不是明显的 我们需要一个计算机程序来求解 而且我们需要的是一个高效的算法 这个情形中结果存在这样的路径 学习算法的另一个原因是可以启发智力 研究算法非常有趣 高德纳（Don Knuth）是算法领域的先驱 他写过很多算法相关的书籍 他曾经说 “算法亲眼见到可行了才能信赖” 你不能光思考算法 还要动手去做 Francis Sullivan说过 “好算法是计算的诗篇” 像散文一样 算法可以是简洁的、飘渺的、凝练的甚至是神秘的 但一旦神秘被揭开，算法就启发计算的某个方面 算法吸引人的地方就在于它启迪智慧 我猜你们许多人学算法的另一个理由是 要成为一个技术娴熟的程序员 懂得优秀的算法、高效的算法、合适的数据结构是必须的 发明Linux的Linus Torvalds说过 程序员的差距就体现在他觉得代码更重要还是数据结构更重要 拙劣的程序员关心代码 而优秀的程序员 关心数据结构 以及它们之间的关系 我想在这里补充一下 还有处理这些关系的算法 Niklaus Wirth 另一位计算机科学的先驱 著名的Algorithms+Data Structures = Programs一书的作者 现在研究算法的另一个原因是，算法已经是 用来了解自然的一种通用语言。算法是计算性的模型 在科学研究中，算法模型正在取代数学模型 二十世纪科学家建立数学模型来尝试理解自然现象 很快大家发现数学模型很难求解 求解并针对自然现象验证假设是很困难的 所以现在越来越多的人 在发展计算性的模型 尝试去模拟 自然中可能发生的事情来试着更好地理解它 算法在这个过程中扮演了非常重要的角色 在这门课中 会有这样的一些例子 另一个重要的原因是如果你知道 如何高效的使用算法和数据结构 你将有 更好地机会通过面试获取一个科技工业界的职位 所以 我刚刚说了一堆学习算法的原因 算法影响深远，有古老的根源又提供崭新的机会， 使我们能解决无法以其他方式解决的问题 你可以使用算法提高自己的智力 成为一名专业的程序员 算法可能揭开宇宙中生命的奥秘 算法能带来乐趣和利益 开个玩笑 一个专业的程序员或许会问 为什么要学别的东西？当然 学习其他东西也有大量充分原因的 但我没有不学习算法的充分理由 关于这门课 我要讲下这两个资源 确保你们 在进入正题之前做好准备 这是我和Kevin Wayne发展并已经 应用了很多年的出版模式 我们认为 这是一种支持我们将要讲授的课程的很有效的方式 下面这个是对应的可选的课本 这是一部传统的教科书，详尽地覆盖了这门课的主题 实际上包括了比我们在这门课里能讲的多得多的主题 同时还有那个课本配套的免费在线资料 在这里你能找到这门课的讲义 但是更重要的是， 这里有代码和练习 以及非常多的信息 可能是书中内容的十倍 包括内容总结。所以 在这门课程中，你在线学习的时候将会经常参考这个网站 人们经常会问到这门课需要的先修知识。我们假设 学习这门课程的人知道如何编程 知道基本的循环、数组和函数 并且接触过面向对象编程和递归 我们用Java语言 但是我们不会细致地讲Java 主要使用Java 作为描述性的语言。需要一些数学基础 但不包括高等数学。如果你想 复习一些我们认为是这门课程的先修知识的资料， 你可以在书的章节1.1和1.2中做一个快速的回顾 不管是在线的还是纸质的。如果你需要一个深度的复习， 我们有一本书叫做《An Introduction to Programming in Java: An Interdisciplinary Approach》，同样有电子版和纸质版。但是， 底线是 你至少要会编程 一个快速的准备方法是 在你的计算机上使用书中提到的编程模型 写一个Java程序。我们将会在我们布置作业的时候 提供更多的详细信息。你可以使用你自己习惯的 编程环境或者使用我们提供的编程环境。在网页上有 一些指导 
